[
  structure_item (tail.ml[8,182+0]..tail.ml[9,198+35])
    Tstr_value Rec
    [
      <def_rec>
        pattern (tail.ml[8,182+8]..tail.ml[8,182+11])
          Tpat_var "foo/269"
          value_mode global,many,nonportable;join(shared,contended)(modevar#1[shared,uncontended .. unique,uncontended])
        expression (tail.ml[8,182+12]..tail.ml[9,198+35]) ghost
          Texp_function
          region true
          alloc_mode global,many,nonportable;id(modevar#7[shared,contended .. unique,uncontended])
          [
            Nolabel
            Param_pat
              pattern (tail.ml[8,182+12]..tail.ml[8,182+13])
                Tpat_var "n/270"
                value_mode global,many,nonportable;shared,uncontended
          ]
          Tfunction_body
            expression (tail.ml[9,198+2]..tail.ml[9,198+35])
              Texp_ifthenelse
              expression (tail.ml[9,198+5]..tail.ml[9,198+10])
                Texp_apply
                apply_mode Default
                locality_mode global
                expression (tail.ml[9,198+7]..tail.ml[9,198+8])
                  Texp_ident "Stdlib!.>"
                [
                  <arg>
                    Nolabel
                    expression (tail.ml[9,198+5]..tail.ml[9,198+6])
                      Texp_ident "n/270"
                  <arg>
                    Nolabel
                    expression (tail.ml[9,198+9]..tail.ml[9,198+10])
                      Texp_constant Const_int 0
                ]
              expression (tail.ml[9,198+16]..tail.ml[9,198+27])
                Texp_apply
                apply_mode Tail
                locality_mode global
                expression (tail.ml[9,198+16]..tail.ml[9,198+19])
                  Texp_ident "foo/269"
                [
                  <arg>
                    Nolabel
                    expression (tail.ml[9,198+20]..tail.ml[9,198+27])
                      Texp_apply
                      apply_mode Default
                      locality_mode global
                      expression (tail.ml[9,198+23]..tail.ml[9,198+24])
                        Texp_ident "Stdlib!.-"
                      [
                        <arg>
                          Nolabel
                          expression (tail.ml[9,198+21]..tail.ml[9,198+22])
                            Texp_ident "n/270"
                        <arg>
                          Nolabel
                          expression (tail.ml[9,198+25]..tail.ml[9,198+26])
                            Texp_constant Const_int 2
                      ]
                ]
              Some
                expression (tail.ml[9,198+33]..tail.ml[9,198+35])
                  Texp_construct "()"
                  []
    ]
  structure_item (tail.ml[11,235+0]..tail.ml[13,288+39])
    Tstr_value Rec
    [
      <def_rec>
        pattern (tail.ml[11,235+8]..tail.ml[11,235+11])
          Tpat_var "bar/271"
          value_mode global,many,nonportable;join(shared,contended)(modevar#2b[shared,uncontended .. unique,uncontended])
        expression (tail.ml[11,235+12]..tail.ml[12,252+35]) ghost
          Texp_function
          region true
          alloc_mode global,many,nonportable;id(modevar#35[shared,contended .. unique,uncontended])
          [
            Nolabel
            Param_pat
              pattern (tail.ml[11,235+12]..tail.ml[11,235+13])
                Tpat_var "n/273"
                value_mode global,many,nonportable;shared,uncontended
          ]
          Tfunction_body
            expression (tail.ml[12,252+2]..tail.ml[12,252+35])
              Texp_ifthenelse
              expression (tail.ml[12,252+5]..tail.ml[12,252+10])
                Texp_apply
                apply_mode Default
                locality_mode global
                expression (tail.ml[12,252+7]..tail.ml[12,252+8])
                  Texp_ident "Stdlib!.>"
                [
                  <arg>
                    Nolabel
                    expression (tail.ml[12,252+5]..tail.ml[12,252+6])
                      Texp_ident "n/273"
                  <arg>
                    Nolabel
                    expression (tail.ml[12,252+9]..tail.ml[12,252+10])
                      Texp_constant Const_int 0
                ]
              expression (tail.ml[12,252+16]..tail.ml[12,252+27])
                Texp_apply
                apply_mode Tail
                locality_mode global
                expression (tail.ml[12,252+16]..tail.ml[12,252+19])
                  Texp_ident "baz/272"
                [
                  <arg>
                    Nolabel
                    expression (tail.ml[12,252+20]..tail.ml[12,252+27])
                      Texp_apply
                      apply_mode Default
                      locality_mode global
                      expression (tail.ml[12,252+23]..tail.ml[12,252+24])
                        Texp_ident "Stdlib!.-"
                      [
                        <arg>
                          Nolabel
                          expression (tail.ml[12,252+21]..tail.ml[12,252+22])
                            Texp_ident "n/273"
                        <arg>
                          Nolabel
                          expression (tail.ml[12,252+25]..tail.ml[12,252+26])
                            Texp_constant Const_int 2
                      ]
                ]
              Some
                expression (tail.ml[12,252+33]..tail.ml[12,252+35])
                  Texp_construct "()"
                  []
      <def_rec>
          attribute "inline"
            [
              structure_item (tail.ml[13,288+13]..[13,288+18])
                Pstr_eval
                expression (tail.ml[13,288+13]..[13,288+18])
                  Pexp_ident "never" (tail.ml[13,288+13]..[13,288+18])
            ]
        pattern (tail.ml[13,288+20]..tail.ml[13,288+23])
          Tpat_var "baz/272"
          value_mode global,many,nonportable;join(shared,contended)(modevar#2b[shared,uncontended .. unique,uncontended])
        expression (tail.ml[13,288+24]..tail.ml[13,288+39]) ghost
          Texp_function
          region true
          alloc_mode global,many,nonportable;id(modevar#59[shared,contended .. unique,uncontended])
          [
            Nolabel
            Param_pat
              pattern (tail.ml[13,288+24]..tail.ml[13,288+25])
                Tpat_var "n/274"
                value_mode global,many,portable;unique,uncontended
          ]
          Tfunction_body
            expression (tail.ml[13,288+28]..tail.ml[13,288+39])
              Texp_apply
              apply_mode Tail
              locality_mode global
              expression (tail.ml[13,288+28]..tail.ml[13,288+31])
                Texp_ident "bar/271"
              [
                <arg>
                  Nolabel
                  expression (tail.ml[13,288+32]..tail.ml[13,288+39])
                    Texp_apply
                    apply_mode Default
                    locality_mode global
                    expression (tail.ml[13,288+35]..tail.ml[13,288+36])
                      Texp_ident "Stdlib!.+"
                    [
                      <arg>
                        Nolabel
                        expression (tail.ml[13,288+33]..tail.ml[13,288+34])
                          Texp_ident "n/274"
                      <arg>
                        Nolabel
                        expression (tail.ml[13,288+37]..tail.ml[13,288+38])
                          Texp_constant Const_int 1
                    ]
              ]
    ]
]

*** After instruction selection
camlTail__foo_0_3_code(R:I/0[%rax]) {tail.ml:8,12-51}
  n:I/61 := R:I/0[%rax]
  catch rec
    I/63 := n:I/61
    n:I/62 := I/63
    exit(2)
  with(2)
    if n:I/62 >s 1 then
      I/65 := n:I/62
      I/65 := I/65 + -4{tail.ml:9,20-27}
      I/66 := I/65
      n:I/62 := I/66
      exit(2)
    else
      I/64 := 1
      R:I/0[%rax] := I/64
      return R:I/0[%rax]
    endif{tail.ml:9,5-10}
    
  endcatch
*** After instruction selection
camlTail__bar_1_4_code(R:I/0[%rax]) {tail.ml:11,12-52}
  n:I/61 := R:I/0[%rax]
  if n:I/61 >s 1 then
    I/63 := n:I/61
    I/63 := I/63 + -4{tail.ml:12,20-27}
    R:I/0[%rax] := I/63
    tailcall "camlTail__baz_2_5_code" R:I/0[%rax]{tail.ml:12,16-27}
  else
    I/62 := 1
    R:I/0[%rax] := I/62
    return R:I/0[%rax]
  endif{tail.ml:12,5-10}
*** After instruction selection
camlTail__baz_2_5_code(R:I/0[%rax]) {tail.ml:13,24-39}
  n:I/61 := R:I/0[%rax]
  I/62 := n:I/61
  I/62 := I/62 + 2{tail.ml:13,32-39}
  R:I/0[%rax] := I/62
  tailcall "camlTail__bar_1_4_code" R:I/0[%rax]{tail.ml:13,28-39}
*** After instruction selection
camlTail__entry() no_cse reduce_code_size linscan
  catch
    I/62 := "camlTail"
    I/63 := I/62
    *ret*:V/61 := I/63
    exit(1)
  with(1)
    I/64 := 1
    R:I/0[%rax] := I/64
    return R:I/0[%rax]
    
  endcatch
*** After instruction selection
caml_program() reduce_code_size linscan
  I/61 := 0
  *id*:I/62 := I/61
  catch
    catch rec
      exit(4)
    with(4)
      if *id*:I/62 ==s 4 then
        exit(3)
      endif
      I/63 := "caml_globals_entry_functions"
      I/64 := int [I/63 + *id*:I/62 * 8]
      call I/64
      I/65 := "caml_globals_inited"
      [I/65] +:= 1
      I/66 := *id*:I/62
      I/66 := I/66 + 1
      *id*:I/62 := I/66
      exit(4)
      
    endcatch
  with(3)
    
    
  endcatch
  I/67 := 1
  R:I/0[%rax] := I/67
  return R:I/0[%rax]
*** After instruction selection
caml_tuplify2(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := val  mut[arg:V/61 + 8]
  V/64 := val  mut[arg:V/61]
  I/65 := int  mut[clos:V/62 + 16]
  R:I/0[%rax] := V/64
  R:I/1[%rbx] := V/63
  R:I/2[%rdi] := clos:V/62
  tailcall I/65 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi]
*** After instruction selection
caml_curry2(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc 40
  [V/63 + -8] := 4343 (init)
  I/64 := "caml_curry2_1"
  val[V/63] := I/64 (init)
  I/65 := 108086391056891909
  val[V/63 + 8] := I/65 (init)
  val[V/63 + 16] := arg:V/61 (init)
  val[V/63 + 24] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry2_1(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  clos:V/63 := val  mut[clos:V/62 + 24]
  V/64 := val  mut[clos:V/62 + 16]
  I/65 := int  mut[clos:V/63 + 16]
  R:I/0[%rax] := V/64
  R:I/1[%rbx] := arg:V/61
  R:I/2[%rdi] := clos:V/63
  tailcall I/65 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi]
*** After instruction selection
caml_curry3(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc 48
  [V/63 + -8] := 5367 (init)
  I/64 := "caml_curry3_1"
  val[V/63] := I/64 (init)
  I/65 := 180143985094819847
  val[V/63 + 8] := I/65 (init)
  I/66 := "caml_curry3_1_app"
  val[V/63 + 16] := I/66 (init)
  val[V/63 + 24] := arg:V/61 (init)
  val[V/63 + 32] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry3_1_app(R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi])
  arg2:V/61 := R:I/0[%rax]
  arg3:V/62 := R:I/1[%rbx]
  clos:V/63 := R:I/2[%rdi]
  clos:V/64 := val  mut[clos:V/63 + 32]
  V/65 := val  mut[clos:V/63 + 24]
  I/66 := int  mut[clos:V/64 + 16]
  R:I/0[%rax] := V/65
  R:I/1[%rbx] := arg2:V/61
  R:I/2[%rdi] := arg3:V/62
  R:I/3[%rsi] := clos:V/64
  tailcall I/66 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi]
*** After instruction selection
caml_curry3_1(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc 40
  [V/63 + -8] := 4343 (init)
  I/64 := "caml_curry3_2"
  val[V/63] := I/64 (init)
  I/65 := 108086391056891909
  val[V/63 + 8] := I/65 (init)
  val[V/63 + 16] := arg:V/61 (init)
  val[V/63 + 24] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry3_2(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  clos:V/63 := val  mut[clos:V/62 + 24]
  clos:V/64 := val  mut[clos:V/63 + 32]
  V/65 := val  mut[clos:V/62 + 16]
  V/66 := val  mut[clos:V/63 + 24]
  I/67 := int  mut[clos:V/64 + 16]
  R:I/0[%rax] := V/66
  R:I/1[%rbx] := V/65
  R:I/2[%rdi] := arg:V/61
  R:I/3[%rsi] := clos:V/64
  tailcall I/67 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi]
*** After instruction selection
caml_curry4(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc 48
  [V/63 + -8] := 5367 (init)
  I/64 := "caml_curry4_1"
  val[V/63] := I/64 (init)
  I/65 := 252201579132747783
  val[V/63 + 8] := I/65 (init)
  I/66 := "caml_curry4_1_app"
  val[V/63 + 16] := I/66 (init)
  val[V/63 + 24] := arg:V/61 (init)
  val[V/63 + 32] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry4_1_app(R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi])
  arg2:V/61 := R:I/0[%rax]
  arg3:V/62 := R:I/1[%rbx]
  arg4:V/63 := R:I/2[%rdi]
  clos:V/64 := R:I/3[%rsi]
  clos:V/65 := val  mut[clos:V/64 + 32]
  V/66 := val  mut[clos:V/64 + 24]
  I/67 := int  mut[clos:V/65 + 16]
  R:I/0[%rax] := V/66
  R:I/1[%rbx] := arg2:V/61
  R:I/2[%rdi] := arg3:V/62
  R:I/3[%rsi] := arg4:V/63
  R:I/4[%rdx] := clos:V/65
  tailcall I/67 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx]
*** After instruction selection
caml_curry4_1(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc 48
  [V/63 + -8] := 5367 (init)
  I/64 := "caml_curry4_2"
  val[V/63] := I/64 (init)
  I/65 := 180143985094819847
  val[V/63 + 8] := I/65 (init)
  I/66 := "caml_curry4_2_app"
  val[V/63 + 16] := I/66 (init)
  val[V/63 + 24] := arg:V/61 (init)
  val[V/63 + 32] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry4_2_app(R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi])
  arg3:V/61 := R:I/0[%rax]
  arg4:V/62 := R:I/1[%rbx]
  clos:V/63 := R:I/2[%rdi]
  clos:V/64 := val  mut[clos:V/63 + 32]
  clos:V/65 := val  mut[clos:V/64 + 32]
  V/66 := val  mut[clos:V/63 + 24]
  V/67 := val  mut[clos:V/64 + 24]
  I/68 := int  mut[clos:V/65 + 16]
  R:I/0[%rax] := V/67
  R:I/1[%rbx] := V/66
  R:I/2[%rdi] := arg3:V/61
  R:I/3[%rsi] := arg4:V/62
  R:I/4[%rdx] := clos:V/65
  tailcall I/68 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx]
*** After instruction selection
caml_curry4_2(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc 40
  [V/63 + -8] := 4343 (init)
  I/64 := "caml_curry4_3"
  val[V/63] := I/64 (init)
  I/65 := 108086391056891909
  val[V/63 + 8] := I/65 (init)
  val[V/63 + 16] := arg:V/61 (init)
  val[V/63 + 24] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry4_3(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  clos:V/63 := val  mut[clos:V/62 + 24]
  clos:V/64 := val  mut[clos:V/63 + 32]
  clos:V/65 := val  mut[clos:V/64 + 32]
  V/66 := val  mut[clos:V/62 + 16]
  V/67 := val  mut[clos:V/63 + 24]
  V/68 := val  mut[clos:V/64 + 24]
  I/69 := int  mut[clos:V/65 + 16]
  R:I/0[%rax] := V/68
  R:I/1[%rbx] := V/67
  R:I/2[%rdi] := V/66
  R:I/3[%rsi] := arg:V/61
  R:I/4[%rdx] := clos:V/65
  tailcall I/69 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx]
*** After instruction selection
caml_curry5(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc 48
  [V/63 + -8] := 5367 (init)
  I/64 := "caml_curry5_1"
  val[V/63] := I/64 (init)
  I/65 := 324259173170675719
  val[V/63 + 8] := I/65 (init)
  I/66 := "caml_curry5_1_app"
  val[V/63 + 16] := I/66 (init)
  val[V/63 + 24] := arg:V/61 (init)
  val[V/63 + 32] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry5_1_app(R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx])
  arg2:V/61 := R:I/0[%rax]
  arg3:V/62 := R:I/1[%rbx]
  arg4:V/63 := R:I/2[%rdi]
  arg5:V/64 := R:I/3[%rsi]
  clos:V/65 := R:I/4[%rdx]
  clos:V/66 := val  mut[clos:V/65 + 32]
  V/67 := val  mut[clos:V/65 + 24]
  I/68 := int  mut[clos:V/66 + 16]
  R:I/0[%rax] := V/67
  R:I/1[%rbx] := arg2:V/61
  R:I/2[%rdi] := arg3:V/62
  R:I/3[%rsi] := arg4:V/63
  R:I/4[%rdx] := arg5:V/64
  R:I/5[%rcx] := clos:V/66
  tailcall I/68 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx]
*** After instruction selection
caml_curry5_1(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc 48
  [V/63 + -8] := 5367 (init)
  I/64 := "caml_curry5_2"
  val[V/63] := I/64 (init)
  I/65 := 252201579132747783
  val[V/63 + 8] := I/65 (init)
  I/66 := "caml_curry5_2_app"
  val[V/63 + 16] := I/66 (init)
  val[V/63 + 24] := arg:V/61 (init)
  val[V/63 + 32] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry5_2_app(R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi])
  arg3:V/61 := R:I/0[%rax]
  arg4:V/62 := R:I/1[%rbx]
  arg5:V/63 := R:I/2[%rdi]
  clos:V/64 := R:I/3[%rsi]
  clos:V/65 := val  mut[clos:V/64 + 32]
  clos:V/66 := val  mut[clos:V/65 + 32]
  V/67 := val  mut[clos:V/64 + 24]
  V/68 := val  mut[clos:V/65 + 24]
  I/69 := int  mut[clos:V/66 + 16]
  R:I/0[%rax] := V/68
  R:I/1[%rbx] := V/67
  R:I/2[%rdi] := arg3:V/61
  R:I/3[%rsi] := arg4:V/62
  R:I/4[%rdx] := arg5:V/63
  R:I/5[%rcx] := clos:V/66
  tailcall I/69 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx]
*** After instruction selection
caml_curry5_2(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc 48
  [V/63 + -8] := 5367 (init)
  I/64 := "caml_curry5_3"
  val[V/63] := I/64 (init)
  I/65 := 180143985094819847
  val[V/63 + 8] := I/65 (init)
  I/66 := "caml_curry5_3_app"
  val[V/63 + 16] := I/66 (init)
  val[V/63 + 24] := arg:V/61 (init)
  val[V/63 + 32] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry5_3_app(R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi])
  arg4:V/61 := R:I/0[%rax]
  arg5:V/62 := R:I/1[%rbx]
  clos:V/63 := R:I/2[%rdi]
  clos:V/64 := val  mut[clos:V/63 + 32]
  clos:V/65 := val  mut[clos:V/64 + 32]
  clos:V/66 := val  mut[clos:V/65 + 32]
  V/67 := val  mut[clos:V/63 + 24]
  V/68 := val  mut[clos:V/64 + 24]
  V/69 := val  mut[clos:V/65 + 24]
  I/70 := int  mut[clos:V/66 + 16]
  R:I/0[%rax] := V/69
  R:I/1[%rbx] := V/68
  R:I/2[%rdi] := V/67
  R:I/3[%rsi] := arg4:V/61
  R:I/4[%rdx] := arg5:V/62
  R:I/5[%rcx] := clos:V/66
  tailcall I/70 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx]
*** After instruction selection
caml_curry5_3(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc 40
  [V/63 + -8] := 4343 (init)
  I/64 := "caml_curry5_4"
  val[V/63] := I/64 (init)
  I/65 := 108086391056891909
  val[V/63 + 8] := I/65 (init)
  val[V/63 + 16] := arg:V/61 (init)
  val[V/63 + 24] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry5_4(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  clos:V/63 := val  mut[clos:V/62 + 24]
  clos:V/64 := val  mut[clos:V/63 + 32]
  clos:V/65 := val  mut[clos:V/64 + 32]
  clos:V/66 := val  mut[clos:V/65 + 32]
  V/67 := val  mut[clos:V/62 + 16]
  V/68 := val  mut[clos:V/63 + 24]
  V/69 := val  mut[clos:V/64 + 24]
  V/70 := val  mut[clos:V/65 + 24]
  I/71 := int  mut[clos:V/66 + 16]
  R:I/0[%rax] := V/70
  R:I/1[%rbx] := V/69
  R:I/2[%rdi] := V/68
  R:I/3[%rsi] := V/67
  R:I/4[%rdx] := arg:V/61
  R:I/5[%rcx] := clos:V/66
  tailcall I/71 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx]
*** After instruction selection
caml_curry6(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc 48
  [V/63 + -8] := 5367 (init)
  I/64 := "caml_curry6_1"
  val[V/63] := I/64 (init)
  I/65 := 396316767208603655
  val[V/63 + 8] := I/65 (init)
  I/66 := "caml_curry6_1_app"
  val[V/63 + 16] := I/66 (init)
  val[V/63 + 24] := arg:V/61 (init)
  val[V/63 + 32] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry6_1_app(R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx])
  arg2:V/61 := R:I/0[%rax]
  arg3:V/62 := R:I/1[%rbx]
  arg4:V/63 := R:I/2[%rdi]
  arg5:V/64 := R:I/3[%rsi]
  arg6:V/65 := R:I/4[%rdx]
  clos:V/66 := R:I/5[%rcx]
  clos:V/67 := val  mut[clos:V/66 + 32]
  V/68 := val  mut[clos:V/66 + 24]
  I/69 := int  mut[clos:V/67 + 16]
  R:I/0[%rax] := V/68
  R:I/1[%rbx] := arg2:V/61
  R:I/2[%rdi] := arg3:V/62
  R:I/3[%rsi] := arg4:V/63
  R:I/4[%rdx] := arg5:V/64
  R:I/5[%rcx] := arg6:V/65
  R:I/6[%r8] := clos:V/67
  tailcall I/69 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx] R:I/6[%r8]
*** After instruction selection
caml_curry6_1(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc 48
  [V/63 + -8] := 5367 (init)
  I/64 := "caml_curry6_2"
  val[V/63] := I/64 (init)
  I/65 := 324259173170675719
  val[V/63 + 8] := I/65 (init)
  I/66 := "caml_curry6_2_app"
  val[V/63 + 16] := I/66 (init)
  val[V/63 + 24] := arg:V/61 (init)
  val[V/63 + 32] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry6_2_app(R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx])
  arg3:V/61 := R:I/0[%rax]
  arg4:V/62 := R:I/1[%rbx]
  arg5:V/63 := R:I/2[%rdi]
  arg6:V/64 := R:I/3[%rsi]
  clos:V/65 := R:I/4[%rdx]
  clos:V/66 := val  mut[clos:V/65 + 32]
  clos:V/67 := val  mut[clos:V/66 + 32]
  V/68 := val  mut[clos:V/65 + 24]
  V/69 := val  mut[clos:V/66 + 24]
  I/70 := int  mut[clos:V/67 + 16]
  R:I/0[%rax] := V/69
  R:I/1[%rbx] := V/68
  R:I/2[%rdi] := arg3:V/61
  R:I/3[%rsi] := arg4:V/62
  R:I/4[%rdx] := arg5:V/63
  R:I/5[%rcx] := arg6:V/64
  R:I/6[%r8] := clos:V/67
  tailcall I/70 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx] R:I/6[%r8]
*** After instruction selection
caml_curry6_2(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc 48
  [V/63 + -8] := 5367 (init)
  I/64 := "caml_curry6_3"
  val[V/63] := I/64 (init)
  I/65 := 252201579132747783
  val[V/63 + 8] := I/65 (init)
  I/66 := "caml_curry6_3_app"
  val[V/63 + 16] := I/66 (init)
  val[V/63 + 24] := arg:V/61 (init)
  val[V/63 + 32] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry6_3_app(R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi])
  arg4:V/61 := R:I/0[%rax]
  arg5:V/62 := R:I/1[%rbx]
  arg6:V/63 := R:I/2[%rdi]
  clos:V/64 := R:I/3[%rsi]
  clos:V/65 := val  mut[clos:V/64 + 32]
  clos:V/66 := val  mut[clos:V/65 + 32]
  clos:V/67 := val  mut[clos:V/66 + 32]
  V/68 := val  mut[clos:V/64 + 24]
  V/69 := val  mut[clos:V/65 + 24]
  V/70 := val  mut[clos:V/66 + 24]
  I/71 := int  mut[clos:V/67 + 16]
  R:I/0[%rax] := V/70
  R:I/1[%rbx] := V/69
  R:I/2[%rdi] := V/68
  R:I/3[%rsi] := arg4:V/61
  R:I/4[%rdx] := arg5:V/62
  R:I/5[%rcx] := arg6:V/63
  R:I/6[%r8] := clos:V/67
  tailcall I/71 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx] R:I/6[%r8]
*** After instruction selection
caml_curry6_3(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc 48
  [V/63 + -8] := 5367 (init)
  I/64 := "caml_curry6_4"
  val[V/63] := I/64 (init)
  I/65 := 180143985094819847
  val[V/63 + 8] := I/65 (init)
  I/66 := "caml_curry6_4_app"
  val[V/63 + 16] := I/66 (init)
  val[V/63 + 24] := arg:V/61 (init)
  val[V/63 + 32] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry6_4_app(R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi])
  arg5:V/61 := R:I/0[%rax]
  arg6:V/62 := R:I/1[%rbx]
  clos:V/63 := R:I/2[%rdi]
  clos:V/64 := val  mut[clos:V/63 + 32]
  clos:V/65 := val  mut[clos:V/64 + 32]
  clos:V/66 := val  mut[clos:V/65 + 32]
  clos:V/67 := val  mut[clos:V/66 + 32]
  V/68 := val  mut[clos:V/63 + 24]
  V/69 := val  mut[clos:V/64 + 24]
  V/70 := val  mut[clos:V/65 + 24]
  V/71 := val  mut[clos:V/66 + 24]
  I/72 := int  mut[clos:V/67 + 16]
  R:I/0[%rax] := V/71
  R:I/1[%rbx] := V/70
  R:I/2[%rdi] := V/69
  R:I/3[%rsi] := V/68
  R:I/4[%rdx] := arg5:V/61
  R:I/5[%rcx] := arg6:V/62
  R:I/6[%r8] := clos:V/67
  tailcall I/72 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx] R:I/6[%r8]
*** After instruction selection
caml_curry6_4(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc 40
  [V/63 + -8] := 4343 (init)
  I/64 := "caml_curry6_5"
  val[V/63] := I/64 (init)
  I/65 := 108086391056891909
  val[V/63 + 8] := I/65 (init)
  val[V/63 + 16] := arg:V/61 (init)
  val[V/63 + 24] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry6_5(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  clos:V/63 := val  mut[clos:V/62 + 24]
  clos:V/64 := val  mut[clos:V/63 + 32]
  clos:V/65 := val  mut[clos:V/64 + 32]
  clos:V/66 := val  mut[clos:V/65 + 32]
  clos:V/67 := val  mut[clos:V/66 + 32]
  V/68 := val  mut[clos:V/62 + 16]
  V/69 := val  mut[clos:V/63 + 24]
  V/70 := val  mut[clos:V/64 + 24]
  V/71 := val  mut[clos:V/65 + 24]
  V/72 := val  mut[clos:V/66 + 24]
  I/73 := int  mut[clos:V/67 + 16]
  R:I/0[%rax] := V/72
  R:I/1[%rbx] := V/71
  R:I/2[%rdi] := V/70
  R:I/3[%rsi] := V/69
  R:I/4[%rdx] := V/68
  R:I/5[%rcx] := arg:V/61
  R:I/6[%r8] := clos:V/67
  tailcall I/73 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx] R:I/6[%r8]
*** After instruction selection
caml_curry7(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc 48
  [V/63 + -8] := 5367 (init)
  I/64 := "caml_curry7_1"
  val[V/63] := I/64 (init)
  I/65 := 468374361246531591
  val[V/63 + 8] := I/65 (init)
  I/66 := "caml_curry7_1_app"
  val[V/63 + 16] := I/66 (init)
  val[V/63 + 24] := arg:V/61 (init)
  val[V/63 + 32] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry7_1_app(R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx] R:I/6[%r8])
  arg2:V/61 := R:I/0[%rax]
  arg3:V/62 := R:I/1[%rbx]
  arg4:V/63 := R:I/2[%rdi]
  arg5:V/64 := R:I/3[%rsi]
  arg6:V/65 := R:I/4[%rdx]
  arg7:V/66 := R:I/5[%rcx]
  clos:V/67 := R:I/6[%r8]
  clos:V/68 := val  mut[clos:V/67 + 32]
  V/69 := val  mut[clos:V/67 + 24]
  I/70 := int  mut[clos:V/68 + 16]
  R:I/0[%rax] := V/69
  R:I/1[%rbx] := arg2:V/61
  R:I/2[%rdi] := arg3:V/62
  R:I/3[%rsi] := arg4:V/63
  R:I/4[%rdx] := arg5:V/64
  R:I/5[%rcx] := arg6:V/65
  R:I/6[%r8] := arg7:V/66
  R:I/7[%r9] := clos:V/68
  tailcall I/70 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx] R:I/6[%r8] R:I/7[%r9]
*** After instruction selection
caml_curry7_1(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc 48
  [V/63 + -8] := 5367 (init)
  I/64 := "caml_curry7_2"
  val[V/63] := I/64 (init)
  I/65 := 396316767208603655
  val[V/63 + 8] := I/65 (init)
  I/66 := "caml_curry7_2_app"
  val[V/63 + 16] := I/66 (init)
  val[V/63 + 24] := arg:V/61 (init)
  val[V/63 + 32] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry7_2_app(R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx])
  arg3:V/61 := R:I/0[%rax]
  arg4:V/62 := R:I/1[%rbx]
  arg5:V/63 := R:I/2[%rdi]
  arg6:V/64 := R:I/3[%rsi]
  arg7:V/65 := R:I/4[%rdx]
  clos:V/66 := R:I/5[%rcx]
  clos:V/67 := val  mut[clos:V/66 + 32]
  clos:V/68 := val  mut[clos:V/67 + 32]
  V/69 := val  mut[clos:V/66 + 24]
  V/70 := val  mut[clos:V/67 + 24]
  I/71 := int  mut[clos:V/68 + 16]
  R:I/0[%rax] := V/70
  R:I/1[%rbx] := V/69
  R:I/2[%rdi] := arg3:V/61
  R:I/3[%rsi] := arg4:V/62
  R:I/4[%rdx] := arg5:V/63
  R:I/5[%rcx] := arg6:V/64
  R:I/6[%r8] := arg7:V/65
  R:I/7[%r9] := clos:V/68
  tailcall I/71 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx] R:I/6[%r8] R:I/7[%r9]
*** After instruction selection
caml_curry7_2(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc 48
  [V/63 + -8] := 5367 (init)
  I/64 := "caml_curry7_3"
  val[V/63] := I/64 (init)
  I/65 := 324259173170675719
  val[V/63 + 8] := I/65 (init)
  I/66 := "caml_curry7_3_app"
  val[V/63 + 16] := I/66 (init)
  val[V/63 + 24] := arg:V/61 (init)
  val[V/63 + 32] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry7_3_app(R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx])
  arg4:V/61 := R:I/0[%rax]
  arg5:V/62 := R:I/1[%rbx]
  arg6:V/63 := R:I/2[%rdi]
  arg7:V/64 := R:I/3[%rsi]
  clos:V/65 := R:I/4[%rdx]
  clos:V/66 := val  mut[clos:V/65 + 32]
  clos:V/67 := val  mut[clos:V/66 + 32]
  clos:V/68 := val  mut[clos:V/67 + 32]
  V/69 := val  mut[clos:V/65 + 24]
  V/70 := val  mut[clos:V/66 + 24]
  V/71 := val  mut[clos:V/67 + 24]
  I/72 := int  mut[clos:V/68 + 16]
  R:I/0[%rax] := V/71
  R:I/1[%rbx] := V/70
  R:I/2[%rdi] := V/69
  R:I/3[%rsi] := arg4:V/61
  R:I/4[%rdx] := arg5:V/62
  R:I/5[%rcx] := arg6:V/63
  R:I/6[%r8] := arg7:V/64
  R:I/7[%r9] := clos:V/68
  tailcall I/72 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx] R:I/6[%r8] R:I/7[%r9]
*** After instruction selection
caml_curry7_3(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc 48
  [V/63 + -8] := 5367 (init)
  I/64 := "caml_curry7_4"
  val[V/63] := I/64 (init)
  I/65 := 252201579132747783
  val[V/63 + 8] := I/65 (init)
  I/66 := "caml_curry7_4_app"
  val[V/63 + 16] := I/66 (init)
  val[V/63 + 24] := arg:V/61 (init)
  val[V/63 + 32] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry7_4_app(R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi])
  arg5:V/61 := R:I/0[%rax]
  arg6:V/62 := R:I/1[%rbx]
  arg7:V/63 := R:I/2[%rdi]
  clos:V/64 := R:I/3[%rsi]
  clos:V/65 := val  mut[clos:V/64 + 32]
  clos:V/66 := val  mut[clos:V/65 + 32]
  clos:V/67 := val  mut[clos:V/66 + 32]
  clos:V/68 := val  mut[clos:V/67 + 32]
  V/69 := val  mut[clos:V/64 + 24]
  V/70 := val  mut[clos:V/65 + 24]
  V/71 := val  mut[clos:V/66 + 24]
  V/72 := val  mut[clos:V/67 + 24]
  I/73 := int  mut[clos:V/68 + 16]
  R:I/0[%rax] := V/72
  R:I/1[%rbx] := V/71
  R:I/2[%rdi] := V/70
  R:I/3[%rsi] := V/69
  R:I/4[%rdx] := arg5:V/61
  R:I/5[%rcx] := arg6:V/62
  R:I/6[%r8] := arg7:V/63
  R:I/7[%r9] := clos:V/68
  tailcall I/73 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx] R:I/6[%r8] R:I/7[%r9]
*** After instruction selection
caml_curry7_4(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc 48
  [V/63 + -8] := 5367 (init)
  I/64 := "caml_curry7_5"
  val[V/63] := I/64 (init)
  I/65 := 180143985094819847
  val[V/63 + 8] := I/65 (init)
  I/66 := "caml_curry7_5_app"
  val[V/63 + 16] := I/66 (init)
  val[V/63 + 24] := arg:V/61 (init)
  val[V/63 + 32] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry7_5_app(R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi])
  arg6:V/61 := R:I/0[%rax]
  arg7:V/62 := R:I/1[%rbx]
  clos:V/63 := R:I/2[%rdi]
  clos:V/64 := val  mut[clos:V/63 + 32]
  clos:V/65 := val  mut[clos:V/64 + 32]
  clos:V/66 := val  mut[clos:V/65 + 32]
  clos:V/67 := val  mut[clos:V/66 + 32]
  clos:V/68 := val  mut[clos:V/67 + 32]
  V/69 := val  mut[clos:V/63 + 24]
  V/70 := val  mut[clos:V/64 + 24]
  V/71 := val  mut[clos:V/65 + 24]
  V/72 := val  mut[clos:V/66 + 24]
  V/73 := val  mut[clos:V/67 + 24]
  I/74 := int  mut[clos:V/68 + 16]
  R:I/0[%rax] := V/73
  R:I/1[%rbx] := V/72
  R:I/2[%rdi] := V/71
  R:I/3[%rsi] := V/70
  R:I/4[%rdx] := V/69
  R:I/5[%rcx] := arg6:V/61
  R:I/6[%r8] := arg7:V/62
  R:I/7[%r9] := clos:V/68
  tailcall I/74 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx] R:I/6[%r8] R:I/7[%r9]
*** After instruction selection
caml_curry7_5(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc 40
  [V/63 + -8] := 4343 (init)
  I/64 := "caml_curry7_6"
  val[V/63] := I/64 (init)
  I/65 := 108086391056891909
  val[V/63 + 8] := I/65 (init)
  val[V/63 + 16] := arg:V/61 (init)
  val[V/63 + 24] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry7_6(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  clos:V/63 := val  mut[clos:V/62 + 24]
  clos:V/64 := val  mut[clos:V/63 + 32]
  clos:V/65 := val  mut[clos:V/64 + 32]
  clos:V/66 := val  mut[clos:V/65 + 32]
  clos:V/67 := val  mut[clos:V/66 + 32]
  clos:V/68 := val  mut[clos:V/67 + 32]
  V/69 := val  mut[clos:V/62 + 16]
  V/70 := val  mut[clos:V/63 + 24]
  V/71 := val  mut[clos:V/64 + 24]
  V/72 := val  mut[clos:V/65 + 24]
  V/73 := val  mut[clos:V/66 + 24]
  V/74 := val  mut[clos:V/67 + 24]
  I/75 := int  mut[clos:V/68 + 16]
  R:I/0[%rax] := V/74
  R:I/1[%rbx] := V/73
  R:I/2[%rdi] := V/72
  R:I/3[%rsi] := V/71
  R:I/4[%rdx] := V/70
  R:I/5[%rcx] := V/69
  R:I/6[%r8] := arg:V/61
  R:I/7[%r9] := clos:V/68
  tailcall I/75 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx] R:I/6[%r8] R:I/7[%r9]
*** After instruction selection
caml_curry9(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc 48
  [V/63 + -8] := 5367 (init)
  I/64 := "caml_curry9_1"
  val[V/63] := I/64 (init)
  I/65 := 612489549322387463
  val[V/63 + 8] := I/65 (init)
  I/66 := "caml_curry9_1_app"
  val[V/63 + 16] := I/66 (init)
  val[V/63 + 24] := arg:V/61 (init)
  val[V/63 + 32] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry9_1_app(R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx] R:I/6[%r8] R:I/7[%r9] R:I/8[%r12])
  arg2:V/61 := R:I/0[%rax]
  arg3:V/62 := R:I/1[%rbx]
  arg4:V/63 := R:I/2[%rdi]
  arg5:V/64 := R:I/3[%rsi]
  arg6:V/65 := R:I/4[%rdx]
  arg7:V/66 := R:I/5[%rcx]
  arg8:V/67 := R:I/6[%r8]
  arg9:V/68 := R:I/7[%r9]
  clos:V/69 := R:I/8[%r12]
  clos:V/70 := val  mut[clos:V/69 + 32]
  V/71 := val  mut[clos:V/69 + 24]
  I/72 := int  mut[clos:V/70 + 16]
  R:I/0[%rax] := V/71
  R:I/1[%rbx] := arg2:V/61
  R:I/2[%rdi] := arg3:V/62
  R:I/3[%rsi] := arg4:V/63
  R:I/4[%rdx] := arg5:V/64
  R:I/5[%rcx] := arg6:V/65
  R:I/6[%r8] := arg7:V/66
  R:I/7[%r9] := arg8:V/67
  R:I/8[%r12] := arg9:V/68
  R:I/9[%r13] := clos:V/70
  tailcall I/72 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx] R:I/6[%r8] R:I/7[%r9] R:I/8[%r12] R:I/9[%r13]
*** After instruction selection
caml_curry9_1(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc 48
  [V/63 + -8] := 5367 (init)
  I/64 := "caml_curry9_2"
  val[V/63] := I/64 (init)
  I/65 := 540431955284459527
  val[V/63 + 8] := I/65 (init)
  I/66 := "caml_curry9_2_app"
  val[V/63 + 16] := I/66 (init)
  val[V/63 + 24] := arg:V/61 (init)
  val[V/63 + 32] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry9_2_app(R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx] R:I/6[%r8] R:I/7[%r9])
  arg3:V/61 := R:I/0[%rax]
  arg4:V/62 := R:I/1[%rbx]
  arg5:V/63 := R:I/2[%rdi]
  arg6:V/64 := R:I/3[%rsi]
  arg7:V/65 := R:I/4[%rdx]
  arg8:V/66 := R:I/5[%rcx]
  arg9:V/67 := R:I/6[%r8]
  clos:V/68 := R:I/7[%r9]
  clos:V/69 := val  mut[clos:V/68 + 32]
  clos:V/70 := val  mut[clos:V/69 + 32]
  V/71 := val  mut[clos:V/68 + 24]
  V/72 := val  mut[clos:V/69 + 24]
  I/73 := int  mut[clos:V/70 + 16]
  R:I/0[%rax] := V/72
  R:I/1[%rbx] := V/71
  R:I/2[%rdi] := arg3:V/61
  R:I/3[%rsi] := arg4:V/62
  R:I/4[%rdx] := arg5:V/63
  R:I/5[%rcx] := arg6:V/64
  R:I/6[%r8] := arg7:V/65
  R:I/7[%r9] := arg8:V/66
  R:I/8[%r12] := arg9:V/67
  R:I/9[%r13] := clos:V/70
  tailcall I/73 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx] R:I/6[%r8] R:I/7[%r9] R:I/8[%r12] R:I/9[%r13]
*** After instruction selection
caml_curry9_2(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc 48
  [V/63 + -8] := 5367 (init)
  I/64 := "caml_curry9_3"
  val[V/63] := I/64 (init)
  I/65 := 468374361246531591
  val[V/63 + 8] := I/65 (init)
  I/66 := "caml_curry9_3_app"
  val[V/63 + 16] := I/66 (init)
  val[V/63 + 24] := arg:V/61 (init)
  val[V/63 + 32] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry9_3_app(R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx] R:I/6[%r8])
  arg4:V/61 := R:I/0[%rax]
  arg5:V/62 := R:I/1[%rbx]
  arg6:V/63 := R:I/2[%rdi]
  arg7:V/64 := R:I/3[%rsi]
  arg8:V/65 := R:I/4[%rdx]
  arg9:V/66 := R:I/5[%rcx]
  clos:V/67 := R:I/6[%r8]
  clos:V/68 := val  mut[clos:V/67 + 32]
  clos:V/69 := val  mut[clos:V/68 + 32]
  clos:V/70 := val  mut[clos:V/69 + 32]
  V/71 := val  mut[clos:V/67 + 24]
  V/72 := val  mut[clos:V/68 + 24]
  V/73 := val  mut[clos:V/69 + 24]
  I/74 := int  mut[clos:V/70 + 16]
  R:I/0[%rax] := V/73
  R:I/1[%rbx] := V/72
  R:I/2[%rdi] := V/71
  R:I/3[%rsi] := arg4:V/61
  R:I/4[%rdx] := arg5:V/62
  R:I/5[%rcx] := arg6:V/63
  R:I/6[%r8] := arg7:V/64
  R:I/7[%r9] := arg8:V/65
  R:I/8[%r12] := arg9:V/66
  R:I/9[%r13] := clos:V/70
  tailcall I/74 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx] R:I/6[%r8] R:I/7[%r9] R:I/8[%r12] R:I/9[%r13]
*** After instruction selection
caml_curry9_3(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc 48
  [V/63 + -8] := 5367 (init)
  I/64 := "caml_curry9_4"
  val[V/63] := I/64 (init)
  I/65 := 396316767208603655
  val[V/63 + 8] := I/65 (init)
  I/66 := "caml_curry9_4_app"
  val[V/63 + 16] := I/66 (init)
  val[V/63 + 24] := arg:V/61 (init)
  val[V/63 + 32] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry9_4_app(R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx])
  arg5:V/61 := R:I/0[%rax]
  arg6:V/62 := R:I/1[%rbx]
  arg7:V/63 := R:I/2[%rdi]
  arg8:V/64 := R:I/3[%rsi]
  arg9:V/65 := R:I/4[%rdx]
  clos:V/66 := R:I/5[%rcx]
  clos:V/67 := val  mut[clos:V/66 + 32]
  clos:V/68 := val  mut[clos:V/67 + 32]
  clos:V/69 := val  mut[clos:V/68 + 32]
  clos:V/70 := val  mut[clos:V/69 + 32]
  V/71 := val  mut[clos:V/66 + 24]
  V/72 := val  mut[clos:V/67 + 24]
  V/73 := val  mut[clos:V/68 + 24]
  V/74 := val  mut[clos:V/69 + 24]
  I/75 := int  mut[clos:V/70 + 16]
  R:I/0[%rax] := V/74
  R:I/1[%rbx] := V/73
  R:I/2[%rdi] := V/72
  R:I/3[%rsi] := V/71
  R:I/4[%rdx] := arg5:V/61
  R:I/5[%rcx] := arg6:V/62
  R:I/6[%r8] := arg7:V/63
  R:I/7[%r9] := arg8:V/64
  R:I/8[%r12] := arg9:V/65
  R:I/9[%r13] := clos:V/70
  tailcall I/75 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx] R:I/6[%r8] R:I/7[%r9] R:I/8[%r12] R:I/9[%r13]
*** After instruction selection
caml_curry9_4(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc 48
  [V/63 + -8] := 5367 (init)
  I/64 := "caml_curry9_5"
  val[V/63] := I/64 (init)
  I/65 := 324259173170675719
  val[V/63 + 8] := I/65 (init)
  I/66 := "caml_curry9_5_app"
  val[V/63 + 16] := I/66 (init)
  val[V/63 + 24] := arg:V/61 (init)
  val[V/63 + 32] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry9_5_app(R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx])
  arg6:V/61 := R:I/0[%rax]
  arg7:V/62 := R:I/1[%rbx]
  arg8:V/63 := R:I/2[%rdi]
  arg9:V/64 := R:I/3[%rsi]
  clos:V/65 := R:I/4[%rdx]
  clos:V/66 := val  mut[clos:V/65 + 32]
  clos:V/67 := val  mut[clos:V/66 + 32]
  clos:V/68 := val  mut[clos:V/67 + 32]
  clos:V/69 := val  mut[clos:V/68 + 32]
  clos:V/70 := val  mut[clos:V/69 + 32]
  V/71 := val  mut[clos:V/65 + 24]
  V/72 := val  mut[clos:V/66 + 24]
  V/73 := val  mut[clos:V/67 + 24]
  V/74 := val  mut[clos:V/68 + 24]
  V/75 := val  mut[clos:V/69 + 24]
  I/76 := int  mut[clos:V/70 + 16]
  R:I/0[%rax] := V/75
  R:I/1[%rbx] := V/74
  R:I/2[%rdi] := V/73
  R:I/3[%rsi] := V/72
  R:I/4[%rdx] := V/71
  R:I/5[%rcx] := arg6:V/61
  R:I/6[%r8] := arg7:V/62
  R:I/7[%r9] := arg8:V/63
  R:I/8[%r12] := arg9:V/64
  R:I/9[%r13] := clos:V/70
  tailcall I/76 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx] R:I/6[%r8] R:I/7[%r9] R:I/8[%r12] R:I/9[%r13]
*** After instruction selection
caml_curry9_5(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc 48
  [V/63 + -8] := 5367 (init)
  I/64 := "caml_curry9_6"
  val[V/63] := I/64 (init)
  I/65 := 252201579132747783
  val[V/63 + 8] := I/65 (init)
  I/66 := "caml_curry9_6_app"
  val[V/63 + 16] := I/66 (init)
  val[V/63 + 24] := arg:V/61 (init)
  val[V/63 + 32] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry9_6_app(R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi])
  arg7:V/61 := R:I/0[%rax]
  arg8:V/62 := R:I/1[%rbx]
  arg9:V/63 := R:I/2[%rdi]
  clos:V/64 := R:I/3[%rsi]
  clos:V/65 := val  mut[clos:V/64 + 32]
  clos:V/66 := val  mut[clos:V/65 + 32]
  clos:V/67 := val  mut[clos:V/66 + 32]
  clos:V/68 := val  mut[clos:V/67 + 32]
  clos:V/69 := val  mut[clos:V/68 + 32]
  clos:V/70 := val  mut[clos:V/69 + 32]
  V/71 := val  mut[clos:V/64 + 24]
  V/72 := val  mut[clos:V/65 + 24]
  V/73 := val  mut[clos:V/66 + 24]
  V/74 := val  mut[clos:V/67 + 24]
  V/75 := val  mut[clos:V/68 + 24]
  V/76 := val  mut[clos:V/69 + 24]
  I/77 := int  mut[clos:V/70 + 16]
  R:I/0[%rax] := V/76
  R:I/1[%rbx] := V/75
  R:I/2[%rdi] := V/74
  R:I/3[%rsi] := V/73
  R:I/4[%rdx] := V/72
  R:I/5[%rcx] := V/71
  R:I/6[%r8] := arg7:V/61
  R:I/7[%r9] := arg8:V/62
  R:I/8[%r12] := arg9:V/63
  R:I/9[%r13] := clos:V/70
  tailcall I/77 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx] R:I/6[%r8] R:I/7[%r9] R:I/8[%r12] R:I/9[%r13]
*** After instruction selection
caml_curry9_6(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc 48
  [V/63 + -8] := 5367 (init)
  I/64 := "caml_curry9_7"
  val[V/63] := I/64 (init)
  I/65 := 180143985094819847
  val[V/63 + 8] := I/65 (init)
  I/66 := "caml_curry9_7_app"
  val[V/63 + 16] := I/66 (init)
  val[V/63 + 24] := arg:V/61 (init)
  val[V/63 + 32] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry9_7_app(R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi])
  arg8:V/61 := R:I/0[%rax]
  arg9:V/62 := R:I/1[%rbx]
  clos:V/63 := R:I/2[%rdi]
  clos:V/64 := val  mut[clos:V/63 + 32]
  clos:V/65 := val  mut[clos:V/64 + 32]
  clos:V/66 := val  mut[clos:V/65 + 32]
  clos:V/67 := val  mut[clos:V/66 + 32]
  clos:V/68 := val  mut[clos:V/67 + 32]
  clos:V/69 := val  mut[clos:V/68 + 32]
  clos:V/70 := val  mut[clos:V/69 + 32]
  V/71 := val  mut[clos:V/63 + 24]
  V/72 := val  mut[clos:V/64 + 24]
  V/73 := val  mut[clos:V/65 + 24]
  V/74 := val  mut[clos:V/66 + 24]
  V/75 := val  mut[clos:V/67 + 24]
  V/76 := val  mut[clos:V/68 + 24]
  V/77 := val  mut[clos:V/69 + 24]
  I/78 := int  mut[clos:V/70 + 16]
  R:I/0[%rax] := V/77
  R:I/1[%rbx] := V/76
  R:I/2[%rdi] := V/75
  R:I/3[%rsi] := V/74
  R:I/4[%rdx] := V/73
  R:I/5[%rcx] := V/72
  R:I/6[%r8] := V/71
  R:I/7[%r9] := arg8:V/61
  R:I/8[%r12] := arg9:V/62
  R:I/9[%r13] := clos:V/70
  tailcall I/78 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx] R:I/6[%r8] R:I/7[%r9] R:I/8[%r12] R:I/9[%r13]
*** After instruction selection
caml_curry9_7(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc 40
  [V/63 + -8] := 4343 (init)
  I/64 := "caml_curry9_8"
  val[V/63] := I/64 (init)
  I/65 := 108086391056891909
  val[V/63 + 8] := I/65 (init)
  val[V/63 + 16] := arg:V/61 (init)
  val[V/63 + 24] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry9_8(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  clos:V/63 := val  mut[clos:V/62 + 24]
  clos:V/64 := val  mut[clos:V/63 + 32]
  clos:V/65 := val  mut[clos:V/64 + 32]
  clos:V/66 := val  mut[clos:V/65 + 32]
  clos:V/67 := val  mut[clos:V/66 + 32]
  clos:V/68 := val  mut[clos:V/67 + 32]
  clos:V/69 := val  mut[clos:V/68 + 32]
  clos:V/70 := val  mut[clos:V/69 + 32]
  V/71 := val  mut[clos:V/62 + 16]
  V/72 := val  mut[clos:V/63 + 24]
  V/73 := val  mut[clos:V/64 + 24]
  V/74 := val  mut[clos:V/65 + 24]
  V/75 := val  mut[clos:V/66 + 24]
  V/76 := val  mut[clos:V/67 + 24]
  V/77 := val  mut[clos:V/68 + 24]
  V/78 := val  mut[clos:V/69 + 24]
  I/79 := int  mut[clos:V/70 + 16]
  R:I/0[%rax] := V/78
  R:I/1[%rbx] := V/77
  R:I/2[%rdi] := V/76
  R:I/3[%rsi] := V/75
  R:I/4[%rdx] := V/74
  R:I/5[%rcx] := V/73
  R:I/6[%r8] := V/72
  R:I/7[%r9] := V/71
  R:I/8[%r12] := arg:V/61
  R:I/9[%r13] := clos:V/70
  tailcall I/79 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx] R:I/6[%r8] R:I/7[%r9] R:I/8[%r12] R:I/9[%r13]
*** After instruction selection
caml_curry10(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc 48
  [V/63 + -8] := 5367 (init)
  I/64 := "caml_curry10_1"
  val[V/63] := I/64 (init)
  I/65 := 684547143360315399
  val[V/63 + 8] := I/65 (init)
  I/66 := "caml_curry10_1_app"
  val[V/63 + 16] := I/66 (init)
  val[V/63 + 24] := arg:V/61 (init)
  val[V/63 + 32] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry10_1_app(R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx] R:I/6[%r8] R:I/7[%r9] R:I/8[%r12] R:I/9[%r13])
  arg2:V/61 := R:I/0[%rax]
  arg3:V/62 := R:I/1[%rbx]
  arg4:V/63 := R:I/2[%rdi]
  arg5:V/64 := R:I/3[%rsi]
  arg6:V/65 := R:I/4[%rdx]
  arg7:V/66 := R:I/5[%rcx]
  arg8:V/67 := R:I/6[%r8]
  arg9:V/68 := R:I/7[%r9]
  arg10:V/69 := R:I/8[%r12]
  clos:V/70 := R:I/9[%r13]
  clos:V/71 := val  mut[clos:V/70 + 32]
  V/72 := val  mut[clos:V/70 + 24]
  I/73 := int  mut[clos:V/71 + 16]
  R:I/0[%rax] := V/72
  R:I/1[%rbx] := arg2:V/61
  R:I/2[%rdi] := arg3:V/62
  R:I/3[%rsi] := arg4:V/63
  R:I/4[%rdx] := arg5:V/64
  R:I/5[%rcx] := arg6:V/65
  R:I/6[%r8] := arg7:V/66
  R:I/7[%r9] := arg8:V/67
  R:I/8[%r12] := arg9:V/68
  R:I/9[%r13] := arg10:V/69
  R:V/75[ds[0]] := clos:V/71
  tailcall I/73 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx] R:I/6[%r8] R:I/7[%r9] R:I/8[%r12] R:I/9[%r13] R:V/75[ds[0]]
*** After instruction selection
caml_curry10_1(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc 48
  [V/63 + -8] := 5367 (init)
  I/64 := "caml_curry10_2"
  val[V/63] := I/64 (init)
  I/65 := 612489549322387463
  val[V/63 + 8] := I/65 (init)
  I/66 := "caml_curry10_2_app"
  val[V/63 + 16] := I/66 (init)
  val[V/63 + 24] := arg:V/61 (init)
  val[V/63 + 32] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry10_2_app(R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx] R:I/6[%r8] R:I/7[%r9] R:I/8[%r12])
  arg3:V/61 := R:I/0[%rax]
  arg4:V/62 := R:I/1[%rbx]
  arg5:V/63 := R:I/2[%rdi]
  arg6:V/64 := R:I/3[%rsi]
  arg7:V/65 := R:I/4[%rdx]
  arg8:V/66 := R:I/5[%rcx]
  arg9:V/67 := R:I/6[%r8]
  arg10:V/68 := R:I/7[%r9]
  clos:V/69 := R:I/8[%r12]
  clos:V/70 := val  mut[clos:V/69 + 32]
  clos:V/71 := val  mut[clos:V/70 + 32]
  V/72 := val  mut[clos:V/69 + 24]
  V/73 := val  mut[clos:V/70 + 24]
  I/74 := int  mut[clos:V/71 + 16]
  R:I/0[%rax] := V/73
  R:I/1[%rbx] := V/72
  R:I/2[%rdi] := arg3:V/61
  R:I/3[%rsi] := arg4:V/62
  R:I/4[%rdx] := arg5:V/63
  R:I/5[%rcx] := arg6:V/64
  R:I/6[%r8] := arg7:V/65
  R:I/7[%r9] := arg8:V/66
  R:I/8[%r12] := arg9:V/67
  R:I/9[%r13] := arg10:V/68
  R:V/76[ds[0]] := clos:V/71
  tailcall I/74 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx] R:I/6[%r8] R:I/7[%r9] R:I/8[%r12] R:I/9[%r13] R:V/76[ds[0]]
*** After instruction selection
caml_curry10_2(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc 48
  [V/63 + -8] := 5367 (init)
  I/64 := "caml_curry10_3"
  val[V/63] := I/64 (init)
  I/65 := 540431955284459527
  val[V/63 + 8] := I/65 (init)
  I/66 := "caml_curry10_3_app"
  val[V/63 + 16] := I/66 (init)
  val[V/63 + 24] := arg:V/61 (init)
  val[V/63 + 32] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry10_3_app(R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx] R:I/6[%r8] R:I/7[%r9])
  arg4:V/61 := R:I/0[%rax]
  arg5:V/62 := R:I/1[%rbx]
  arg6:V/63 := R:I/2[%rdi]
  arg7:V/64 := R:I/3[%rsi]
  arg8:V/65 := R:I/4[%rdx]
  arg9:V/66 := R:I/5[%rcx]
  arg10:V/67 := R:I/6[%r8]
  clos:V/68 := R:I/7[%r9]
  clos:V/69 := val  mut[clos:V/68 + 32]
  clos:V/70 := val  mut[clos:V/69 + 32]
  clos:V/71 := val  mut[clos:V/70 + 32]
  V/72 := val  mut[clos:V/68 + 24]
  V/73 := val  mut[clos:V/69 + 24]
  V/74 := val  mut[clos:V/70 + 24]
  I/75 := int  mut[clos:V/71 + 16]
  R:I/0[%rax] := V/74
  R:I/1[%rbx] := V/73
  R:I/2[%rdi] := V/72
  R:I/3[%rsi] := arg4:V/61
  R:I/4[%rdx] := arg5:V/62
  R:I/5[%rcx] := arg6:V/63
  R:I/6[%r8] := arg7:V/64
  R:I/7[%r9] := arg8:V/65
  R:I/8[%r12] := arg9:V/66
  R:I/9[%r13] := arg10:V/67
  R:V/77[ds[0]] := clos:V/71
  tailcall I/75 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx] R:I/6[%r8] R:I/7[%r9] R:I/8[%r12] R:I/9[%r13] R:V/77[ds[0]]
*** After instruction selection
caml_curry10_3(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc 48
  [V/63 + -8] := 5367 (init)
  I/64 := "caml_curry10_4"
  val[V/63] := I/64 (init)
  I/65 := 468374361246531591
  val[V/63 + 8] := I/65 (init)
  I/66 := "caml_curry10_4_app"
  val[V/63 + 16] := I/66 (init)
  val[V/63 + 24] := arg:V/61 (init)
  val[V/63 + 32] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry10_4_app(R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx] R:I/6[%r8])
  arg5:V/61 := R:I/0[%rax]
  arg6:V/62 := R:I/1[%rbx]
  arg7:V/63 := R:I/2[%rdi]
  arg8:V/64 := R:I/3[%rsi]
  arg9:V/65 := R:I/4[%rdx]
  arg10:V/66 := R:I/5[%rcx]
  clos:V/67 := R:I/6[%r8]
  clos:V/68 := val  mut[clos:V/67 + 32]
  clos:V/69 := val  mut[clos:V/68 + 32]
  clos:V/70 := val  mut[clos:V/69 + 32]
  clos:V/71 := val  mut[clos:V/70 + 32]
  V/72 := val  mut[clos:V/67 + 24]
  V/73 := val  mut[clos:V/68 + 24]
  V/74 := val  mut[clos:V/69 + 24]
  V/75 := val  mut[clos:V/70 + 24]
  I/76 := int  mut[clos:V/71 + 16]
  R:I/0[%rax] := V/75
  R:I/1[%rbx] := V/74
  R:I/2[%rdi] := V/73
  R:I/3[%rsi] := V/72
  R:I/4[%rdx] := arg5:V/61
  R:I/5[%rcx] := arg6:V/62
  R:I/6[%r8] := arg7:V/63
  R:I/7[%r9] := arg8:V/64
  R:I/8[%r12] := arg9:V/65
  R:I/9[%r13] := arg10:V/66
  R:V/78[ds[0]] := clos:V/71
  tailcall I/76 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx] R:I/6[%r8] R:I/7[%r9] R:I/8[%r12] R:I/9[%r13] R:V/78[ds[0]]
*** After instruction selection
caml_curry10_4(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc 48
  [V/63 + -8] := 5367 (init)
  I/64 := "caml_curry10_5"
  val[V/63] := I/64 (init)
  I/65 := 396316767208603655
  val[V/63 + 8] := I/65 (init)
  I/66 := "caml_curry10_5_app"
  val[V/63 + 16] := I/66 (init)
  val[V/63 + 24] := arg:V/61 (init)
  val[V/63 + 32] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry10_5_app(R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx])
  arg6:V/61 := R:I/0[%rax]
  arg7:V/62 := R:I/1[%rbx]
  arg8:V/63 := R:I/2[%rdi]
  arg9:V/64 := R:I/3[%rsi]
  arg10:V/65 := R:I/4[%rdx]
  clos:V/66 := R:I/5[%rcx]
  clos:V/67 := val  mut[clos:V/66 + 32]
  clos:V/68 := val  mut[clos:V/67 + 32]
  clos:V/69 := val  mut[clos:V/68 + 32]
  clos:V/70 := val  mut[clos:V/69 + 32]
  clos:V/71 := val  mut[clos:V/70 + 32]
  V/72 := val  mut[clos:V/66 + 24]
  V/73 := val  mut[clos:V/67 + 24]
  V/74 := val  mut[clos:V/68 + 24]
  V/75 := val  mut[clos:V/69 + 24]
  V/76 := val  mut[clos:V/70 + 24]
  I/77 := int  mut[clos:V/71 + 16]
  R:I/0[%rax] := V/76
  R:I/1[%rbx] := V/75
  R:I/2[%rdi] := V/74
  R:I/3[%rsi] := V/73
  R:I/4[%rdx] := V/72
  R:I/5[%rcx] := arg6:V/61
  R:I/6[%r8] := arg7:V/62
  R:I/7[%r9] := arg8:V/63
  R:I/8[%r12] := arg9:V/64
  R:I/9[%r13] := arg10:V/65
  R:V/79[ds[0]] := clos:V/71
  tailcall I/77 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx] R:I/6[%r8] R:I/7[%r9] R:I/8[%r12] R:I/9[%r13] R:V/79[ds[0]]
*** After instruction selection
caml_curry10_5(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc 48
  [V/63 + -8] := 5367 (init)
  I/64 := "caml_curry10_6"
  val[V/63] := I/64 (init)
  I/65 := 324259173170675719
  val[V/63 + 8] := I/65 (init)
  I/66 := "caml_curry10_6_app"
  val[V/63 + 16] := I/66 (init)
  val[V/63 + 24] := arg:V/61 (init)
  val[V/63 + 32] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry10_6_app(R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx])
  arg7:V/61 := R:I/0[%rax]
  arg8:V/62 := R:I/1[%rbx]
  arg9:V/63 := R:I/2[%rdi]
  arg10:V/64 := R:I/3[%rsi]
  clos:V/65 := R:I/4[%rdx]
  clos:V/66 := val  mut[clos:V/65 + 32]
  clos:V/67 := val  mut[clos:V/66 + 32]
  clos:V/68 := val  mut[clos:V/67 + 32]
  clos:V/69 := val  mut[clos:V/68 + 32]
  clos:V/70 := val  mut[clos:V/69 + 32]
  clos:V/71 := val  mut[clos:V/70 + 32]
  V/72 := val  mut[clos:V/65 + 24]
  V/73 := val  mut[clos:V/66 + 24]
  V/74 := val  mut[clos:V/67 + 24]
  V/75 := val  mut[clos:V/68 + 24]
  V/76 := val  mut[clos:V/69 + 24]
  V/77 := val  mut[clos:V/70 + 24]
  I/78 := int  mut[clos:V/71 + 16]
  R:I/0[%rax] := V/77
  R:I/1[%rbx] := V/76
  R:I/2[%rdi] := V/75
  R:I/3[%rsi] := V/74
  R:I/4[%rdx] := V/73
  R:I/5[%rcx] := V/72
  R:I/6[%r8] := arg7:V/61
  R:I/7[%r9] := arg8:V/62
  R:I/8[%r12] := arg9:V/63
  R:I/9[%r13] := arg10:V/64
  R:V/80[ds[0]] := clos:V/71
  tailcall I/78 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx] R:I/6[%r8] R:I/7[%r9] R:I/8[%r12] R:I/9[%r13] R:V/80[ds[0]]
*** After instruction selection
caml_curry10_6(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc 48
  [V/63 + -8] := 5367 (init)
  I/64 := "caml_curry10_7"
  val[V/63] := I/64 (init)
  I/65 := 252201579132747783
  val[V/63 + 8] := I/65 (init)
  I/66 := "caml_curry10_7_app"
  val[V/63 + 16] := I/66 (init)
  val[V/63 + 24] := arg:V/61 (init)
  val[V/63 + 32] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry10_7_app(R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi])
  arg8:V/61 := R:I/0[%rax]
  arg9:V/62 := R:I/1[%rbx]
  arg10:V/63 := R:I/2[%rdi]
  clos:V/64 := R:I/3[%rsi]
  clos:V/65 := val  mut[clos:V/64 + 32]
  clos:V/66 := val  mut[clos:V/65 + 32]
  clos:V/67 := val  mut[clos:V/66 + 32]
  clos:V/68 := val  mut[clos:V/67 + 32]
  clos:V/69 := val  mut[clos:V/68 + 32]
  clos:V/70 := val  mut[clos:V/69 + 32]
  clos:V/71 := val  mut[clos:V/70 + 32]
  V/72 := val  mut[clos:V/64 + 24]
  V/73 := val  mut[clos:V/65 + 24]
  V/74 := val  mut[clos:V/66 + 24]
  V/75 := val  mut[clos:V/67 + 24]
  V/76 := val  mut[clos:V/68 + 24]
  V/77 := val  mut[clos:V/69 + 24]
  V/78 := val  mut[clos:V/70 + 24]
  I/79 := int  mut[clos:V/71 + 16]
  R:I/0[%rax] := V/78
  R:I/1[%rbx] := V/77
  R:I/2[%rdi] := V/76
  R:I/3[%rsi] := V/75
  R:I/4[%rdx] := V/74
  R:I/5[%rcx] := V/73
  R:I/6[%r8] := V/72
  R:I/7[%r9] := arg8:V/61
  R:I/8[%r12] := arg9:V/62
  R:I/9[%r13] := arg10:V/63
  R:V/81[ds[0]] := clos:V/71
  tailcall I/79 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx] R:I/6[%r8] R:I/7[%r9] R:I/8[%r12] R:I/9[%r13] R:V/81[ds[0]]
*** After instruction selection
caml_curry10_7(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc 48
  [V/63 + -8] := 5367 (init)
  I/64 := "caml_curry10_8"
  val[V/63] := I/64 (init)
  I/65 := 180143985094819847
  val[V/63 + 8] := I/65 (init)
  I/66 := "caml_curry10_8_app"
  val[V/63 + 16] := I/66 (init)
  val[V/63 + 24] := arg:V/61 (init)
  val[V/63 + 32] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry10_8_app(R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi])
  arg9:V/61 := R:I/0[%rax]
  arg10:V/62 := R:I/1[%rbx]
  clos:V/63 := R:I/2[%rdi]
  clos:V/64 := val  mut[clos:V/63 + 32]
  clos:V/65 := val  mut[clos:V/64 + 32]
  clos:V/66 := val  mut[clos:V/65 + 32]
  clos:V/67 := val  mut[clos:V/66 + 32]
  clos:V/68 := val  mut[clos:V/67 + 32]
  clos:V/69 := val  mut[clos:V/68 + 32]
  clos:V/70 := val  mut[clos:V/69 + 32]
  clos:V/71 := val  mut[clos:V/70 + 32]
  V/72 := val  mut[clos:V/63 + 24]
  V/73 := val  mut[clos:V/64 + 24]
  V/74 := val  mut[clos:V/65 + 24]
  V/75 := val  mut[clos:V/66 + 24]
  V/76 := val  mut[clos:V/67 + 24]
  V/77 := val  mut[clos:V/68 + 24]
  V/78 := val  mut[clos:V/69 + 24]
  V/79 := val  mut[clos:V/70 + 24]
  I/80 := int  mut[clos:V/71 + 16]
  R:I/0[%rax] := V/79
  R:I/1[%rbx] := V/78
  R:I/2[%rdi] := V/77
  R:I/3[%rsi] := V/76
  R:I/4[%rdx] := V/75
  R:I/5[%rcx] := V/74
  R:I/6[%r8] := V/73
  R:I/7[%r9] := V/72
  R:I/8[%r12] := arg9:V/61
  R:I/9[%r13] := arg10:V/62
  R:V/82[ds[0]] := clos:V/71
  tailcall I/80 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx] R:I/6[%r8] R:I/7[%r9] R:I/8[%r12] R:I/9[%r13] R:V/82[ds[0]]
*** After instruction selection
caml_curry10_8(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc 40
  [V/63 + -8] := 4343 (init)
  I/64 := "caml_curry10_9"
  val[V/63] := I/64 (init)
  I/65 := 108086391056891909
  val[V/63 + 8] := I/65 (init)
  val[V/63 + 16] := arg:V/61 (init)
  val[V/63 + 24] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry10_9(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  clos:V/63 := val  mut[clos:V/62 + 24]
  clos:V/64 := val  mut[clos:V/63 + 32]
  clos:V/65 := val  mut[clos:V/64 + 32]
  clos:V/66 := val  mut[clos:V/65 + 32]
  clos:V/67 := val  mut[clos:V/66 + 32]
  clos:V/68 := val  mut[clos:V/67 + 32]
  clos:V/69 := val  mut[clos:V/68 + 32]
  clos:V/70 := val  mut[clos:V/69 + 32]
  clos:V/71 := val  mut[clos:V/70 + 32]
  V/72 := val  mut[clos:V/62 + 16]
  V/73 := val  mut[clos:V/63 + 24]
  V/74 := val  mut[clos:V/64 + 24]
  V/75 := val  mut[clos:V/65 + 24]
  V/76 := val  mut[clos:V/66 + 24]
  V/77 := val  mut[clos:V/67 + 24]
  V/78 := val  mut[clos:V/68 + 24]
  V/79 := val  mut[clos:V/69 + 24]
  V/80 := val  mut[clos:V/70 + 24]
  I/81 := int  mut[clos:V/71 + 16]
  R:I/0[%rax] := V/80
  R:I/1[%rbx] := V/79
  R:I/2[%rdi] := V/78
  R:I/3[%rsi] := V/77
  R:I/4[%rdx] := V/76
  R:I/5[%rcx] := V/75
  R:I/6[%r8] := V/74
  R:I/7[%r9] := V/73
  R:I/8[%r12] := V/72
  R:I/9[%r13] := arg:V/61
  R:V/83[ds[0]] := clos:V/71
  tailcall I/81 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx] R:I/6[%r8] R:I/7[%r9] R:I/8[%r12] R:I/9[%r13] R:V/83[ds[0]]
*** After instruction selection
caml_curry11(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc 48
  [V/63 + -8] := 5367 (init)
  I/64 := "caml_curry11_1"
  val[V/63] := I/64 (init)
  I/65 := 756604737398243335
  val[V/63 + 8] := I/65 (init)
  I/66 := "caml_curry11_1_app"
  val[V/63 + 16] := I/66 (init)
  val[V/63 + 24] := arg:V/61 (init)
  val[V/63 + 32] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry11_1_app(R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx] R:I/6[%r8] R:I/7[%r9] R:I/8[%r12] R:I/9[%r13] R:V/72[ds[0]])
  arg2:V/61 := R:I/0[%rax]
  arg3:V/62 := R:I/1[%rbx]
  arg4:V/63 := R:I/2[%rdi]
  arg5:V/64 := R:I/3[%rsi]
  arg6:V/65 := R:I/4[%rdx]
  arg7:V/66 := R:I/5[%rcx]
  arg8:V/67 := R:I/6[%r8]
  arg9:V/68 := R:I/7[%r9]
  arg10:V/69 := R:I/8[%r12]
  arg11:V/70 := R:I/9[%r13]
  clos:V/71 := R:V/72[ds[0]]
  clos:V/73 := val  mut[clos:V/71 + 32]
  V/74 := val  mut[clos:V/71 + 24]
  I/75 := int  mut[clos:V/73 + 16]
  R:I/0[%rax] := V/74
  R:I/1[%rbx] := arg2:V/61
  R:I/2[%rdi] := arg3:V/62
  R:I/3[%rsi] := arg4:V/63
  R:I/4[%rdx] := arg5:V/64
  R:I/5[%rcx] := arg6:V/65
  R:I/6[%r8] := arg7:V/66
  R:I/7[%r9] := arg8:V/67
  R:I/8[%r12] := arg9:V/68
  R:I/9[%r13] := arg10:V/69
  R:V/77[ds[0]] := arg11:V/70
  R:V/78[ds[8]] := clos:V/73
  tailcall I/75 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx] R:I/6[%r8] R:I/7[%r9] R:I/8[%r12] R:I/9[%r13] R:V/77[ds[0]] R:V/78[ds[8]]
*** After instruction selection
caml_curry11_1(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc 48
  [V/63 + -8] := 5367 (init)
  I/64 := "caml_curry11_2"
  val[V/63] := I/64 (init)
  I/65 := 684547143360315399
  val[V/63 + 8] := I/65 (init)
  I/66 := "caml_curry11_2_app"
  val[V/63 + 16] := I/66 (init)
  val[V/63 + 24] := arg:V/61 (init)
  val[V/63 + 32] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry11_2_app(R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx] R:I/6[%r8] R:I/7[%r9] R:I/8[%r12] R:I/9[%r13])
  arg3:V/61 := R:I/0[%rax]
  arg4:V/62 := R:I/1[%rbx]
  arg5:V/63 := R:I/2[%rdi]
  arg6:V/64 := R:I/3[%rsi]
  arg7:V/65 := R:I/4[%rdx]
  arg8:V/66 := R:I/5[%rcx]
  arg9:V/67 := R:I/6[%r8]
  arg10:V/68 := R:I/7[%r9]
  arg11:V/69 := R:I/8[%r12]
  clos:V/70 := R:I/9[%r13]
  clos:V/71 := val  mut[clos:V/70 + 32]
  clos:V/72 := val  mut[clos:V/71 + 32]
  V/73 := val  mut[clos:V/70 + 24]
  V/74 := val  mut[clos:V/71 + 24]
  I/75 := int  mut[clos:V/72 + 16]
  R:I/0[%rax] := V/74
  R:I/1[%rbx] := V/73
  R:I/2[%rdi] := arg3:V/61
  R:I/3[%rsi] := arg4:V/62
  R:I/4[%rdx] := arg5:V/63
  R:I/5[%rcx] := arg6:V/64
  R:I/6[%r8] := arg7:V/65
  R:I/7[%r9] := arg8:V/66
  R:I/8[%r12] := arg9:V/67
  R:I/9[%r13] := arg10:V/68
  R:V/77[ds[0]] := arg11:V/69
  R:V/78[ds[8]] := clos:V/72
  tailcall I/75 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx] R:I/6[%r8] R:I/7[%r9] R:I/8[%r12] R:I/9[%r13] R:V/77[ds[0]] R:V/78[ds[8]]
*** After instruction selection
caml_curry11_2(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc 48
  [V/63 + -8] := 5367 (init)
  I/64 := "caml_curry11_3"
  val[V/63] := I/64 (init)
  I/65 := 612489549322387463
  val[V/63 + 8] := I/65 (init)
  I/66 := "caml_curry11_3_app"
  val[V/63 + 16] := I/66 (init)
  val[V/63 + 24] := arg:V/61 (init)
  val[V/63 + 32] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry11_3_app(R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx] R:I/6[%r8] R:I/7[%r9] R:I/8[%r12])
  arg4:V/61 := R:I/0[%rax]
  arg5:V/62 := R:I/1[%rbx]
  arg6:V/63 := R:I/2[%rdi]
  arg7:V/64 := R:I/3[%rsi]
  arg8:V/65 := R:I/4[%rdx]
  arg9:V/66 := R:I/5[%rcx]
  arg10:V/67 := R:I/6[%r8]
  arg11:V/68 := R:I/7[%r9]
  clos:V/69 := R:I/8[%r12]
  clos:V/70 := val  mut[clos:V/69 + 32]
  clos:V/71 := val  mut[clos:V/70 + 32]
  clos:V/72 := val  mut[clos:V/71 + 32]
  V/73 := val  mut[clos:V/69 + 24]
  V/74 := val  mut[clos:V/70 + 24]
  V/75 := val  mut[clos:V/71 + 24]
  I/76 := int  mut[clos:V/72 + 16]
  R:I/0[%rax] := V/75
  R:I/1[%rbx] := V/74
  R:I/2[%rdi] := V/73
  R:I/3[%rsi] := arg4:V/61
  R:I/4[%rdx] := arg5:V/62
  R:I/5[%rcx] := arg6:V/63
  R:I/6[%r8] := arg7:V/64
  R:I/7[%r9] := arg8:V/65
  R:I/8[%r12] := arg9:V/66
  R:I/9[%r13] := arg10:V/67
  R:V/78[ds[0]] := arg11:V/68
  R:V/79[ds[8]] := clos:V/72
  tailcall I/76 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx] R:I/6[%r8] R:I/7[%r9] R:I/8[%r12] R:I/9[%r13] R:V/78[ds[0]] R:V/79[ds[8]]
*** After instruction selection
caml_curry11_3(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc 48
  [V/63 + -8] := 5367 (init)
  I/64 := "caml_curry11_4"
  val[V/63] := I/64 (init)
  I/65 := 540431955284459527
  val[V/63 + 8] := I/65 (init)
  I/66 := "caml_curry11_4_app"
  val[V/63 + 16] := I/66 (init)
  val[V/63 + 24] := arg:V/61 (init)
  val[V/63 + 32] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry11_4_app(R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx] R:I/6[%r8] R:I/7[%r9])
  arg5:V/61 := R:I/0[%rax]
  arg6:V/62 := R:I/1[%rbx]
  arg7:V/63 := R:I/2[%rdi]
  arg8:V/64 := R:I/3[%rsi]
  arg9:V/65 := R:I/4[%rdx]
  arg10:V/66 := R:I/5[%rcx]
  arg11:V/67 := R:I/6[%r8]
  clos:V/68 := R:I/7[%r9]
  clos:V/69 := val  mut[clos:V/68 + 32]
  clos:V/70 := val  mut[clos:V/69 + 32]
  clos:V/71 := val  mut[clos:V/70 + 32]
  clos:V/72 := val  mut[clos:V/71 + 32]
  V/73 := val  mut[clos:V/68 + 24]
  V/74 := val  mut[clos:V/69 + 24]
  V/75 := val  mut[clos:V/70 + 24]
  V/76 := val  mut[clos:V/71 + 24]
  I/77 := int  mut[clos:V/72 + 16]
  R:I/0[%rax] := V/76
  R:I/1[%rbx] := V/75
  R:I/2[%rdi] := V/74
  R:I/3[%rsi] := V/73
  R:I/4[%rdx] := arg5:V/61
  R:I/5[%rcx] := arg6:V/62
  R:I/6[%r8] := arg7:V/63
  R:I/7[%r9] := arg8:V/64
  R:I/8[%r12] := arg9:V/65
  R:I/9[%r13] := arg10:V/66
  R:V/79[ds[0]] := arg11:V/67
  R:V/80[ds[8]] := clos:V/72
  tailcall I/77 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx] R:I/6[%r8] R:I/7[%r9] R:I/8[%r12] R:I/9[%r13] R:V/79[ds[0]] R:V/80[ds[8]]
*** After instruction selection
caml_curry11_4(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc 48
  [V/63 + -8] := 5367 (init)
  I/64 := "caml_curry11_5"
  val[V/63] := I/64 (init)
  I/65 := 468374361246531591
  val[V/63 + 8] := I/65 (init)
  I/66 := "caml_curry11_5_app"
  val[V/63 + 16] := I/66 (init)
  val[V/63 + 24] := arg:V/61 (init)
  val[V/63 + 32] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry11_5_app(R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx] R:I/6[%r8])
  arg6:V/61 := R:I/0[%rax]
  arg7:V/62 := R:I/1[%rbx]
  arg8:V/63 := R:I/2[%rdi]
  arg9:V/64 := R:I/3[%rsi]
  arg10:V/65 := R:I/4[%rdx]
  arg11:V/66 := R:I/5[%rcx]
  clos:V/67 := R:I/6[%r8]
  clos:V/68 := val  mut[clos:V/67 + 32]
  clos:V/69 := val  mut[clos:V/68 + 32]
  clos:V/70 := val  mut[clos:V/69 + 32]
  clos:V/71 := val  mut[clos:V/70 + 32]
  clos:V/72 := val  mut[clos:V/71 + 32]
  V/73 := val  mut[clos:V/67 + 24]
  V/74 := val  mut[clos:V/68 + 24]
  V/75 := val  mut[clos:V/69 + 24]
  V/76 := val  mut[clos:V/70 + 24]
  V/77 := val  mut[clos:V/71 + 24]
  I/78 := int  mut[clos:V/72 + 16]
  R:I/0[%rax] := V/77
  R:I/1[%rbx] := V/76
  R:I/2[%rdi] := V/75
  R:I/3[%rsi] := V/74
  R:I/4[%rdx] := V/73
  R:I/5[%rcx] := arg6:V/61
  R:I/6[%r8] := arg7:V/62
  R:I/7[%r9] := arg8:V/63
  R:I/8[%r12] := arg9:V/64
  R:I/9[%r13] := arg10:V/65
  R:V/80[ds[0]] := arg11:V/66
  R:V/81[ds[8]] := clos:V/72
  tailcall I/78 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx] R:I/6[%r8] R:I/7[%r9] R:I/8[%r12] R:I/9[%r13] R:V/80[ds[0]] R:V/81[ds[8]]
*** After instruction selection
caml_curry11_5(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc 48
  [V/63 + -8] := 5367 (init)
  I/64 := "caml_curry11_6"
  val[V/63] := I/64 (init)
  I/65 := 396316767208603655
  val[V/63 + 8] := I/65 (init)
  I/66 := "caml_curry11_6_app"
  val[V/63 + 16] := I/66 (init)
  val[V/63 + 24] := arg:V/61 (init)
  val[V/63 + 32] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry11_6_app(R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx])
  arg7:V/61 := R:I/0[%rax]
  arg8:V/62 := R:I/1[%rbx]
  arg9:V/63 := R:I/2[%rdi]
  arg10:V/64 := R:I/3[%rsi]
  arg11:V/65 := R:I/4[%rdx]
  clos:V/66 := R:I/5[%rcx]
  clos:V/67 := val  mut[clos:V/66 + 32]
  clos:V/68 := val  mut[clos:V/67 + 32]
  clos:V/69 := val  mut[clos:V/68 + 32]
  clos:V/70 := val  mut[clos:V/69 + 32]
  clos:V/71 := val  mut[clos:V/70 + 32]
  clos:V/72 := val  mut[clos:V/71 + 32]
  V/73 := val  mut[clos:V/66 + 24]
  V/74 := val  mut[clos:V/67 + 24]
  V/75 := val  mut[clos:V/68 + 24]
  V/76 := val  mut[clos:V/69 + 24]
  V/77 := val  mut[clos:V/70 + 24]
  V/78 := val  mut[clos:V/71 + 24]
  I/79 := int  mut[clos:V/72 + 16]
  R:I/0[%rax] := V/78
  R:I/1[%rbx] := V/77
  R:I/2[%rdi] := V/76
  R:I/3[%rsi] := V/75
  R:I/4[%rdx] := V/74
  R:I/5[%rcx] := V/73
  R:I/6[%r8] := arg7:V/61
  R:I/7[%r9] := arg8:V/62
  R:I/8[%r12] := arg9:V/63
  R:I/9[%r13] := arg10:V/64
  R:V/81[ds[0]] := arg11:V/65
  R:V/82[ds[8]] := clos:V/72
  tailcall I/79 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx] R:I/6[%r8] R:I/7[%r9] R:I/8[%r12] R:I/9[%r13] R:V/81[ds[0]] R:V/82[ds[8]]
*** After instruction selection
caml_curry11_6(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc 48
  [V/63 + -8] := 5367 (init)
  I/64 := "caml_curry11_7"
  val[V/63] := I/64 (init)
  I/65 := 324259173170675719
  val[V/63 + 8] := I/65 (init)
  I/66 := "caml_curry11_7_app"
  val[V/63 + 16] := I/66 (init)
  val[V/63 + 24] := arg:V/61 (init)
  val[V/63 + 32] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry11_7_app(R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx])
  arg8:V/61 := R:I/0[%rax]
  arg9:V/62 := R:I/1[%rbx]
  arg10:V/63 := R:I/2[%rdi]
  arg11:V/64 := R:I/3[%rsi]
  clos:V/65 := R:I/4[%rdx]
  clos:V/66 := val  mut[clos:V/65 + 32]
  clos:V/67 := val  mut[clos:V/66 + 32]
  clos:V/68 := val  mut[clos:V/67 + 32]
  clos:V/69 := val  mut[clos:V/68 + 32]
  clos:V/70 := val  mut[clos:V/69 + 32]
  clos:V/71 := val  mut[clos:V/70 + 32]
  clos:V/72 := val  mut[clos:V/71 + 32]
  V/73 := val  mut[clos:V/65 + 24]
  V/74 := val  mut[clos:V/66 + 24]
  V/75 := val  mut[clos:V/67 + 24]
  V/76 := val  mut[clos:V/68 + 24]
  V/77 := val  mut[clos:V/69 + 24]
  V/78 := val  mut[clos:V/70 + 24]
  V/79 := val  mut[clos:V/71 + 24]
  I/80 := int  mut[clos:V/72 + 16]
  R:I/0[%rax] := V/79
  R:I/1[%rbx] := V/78
  R:I/2[%rdi] := V/77
  R:I/3[%rsi] := V/76
  R:I/4[%rdx] := V/75
  R:I/5[%rcx] := V/74
  R:I/6[%r8] := V/73
  R:I/7[%r9] := arg8:V/61
  R:I/8[%r12] := arg9:V/62
  R:I/9[%r13] := arg10:V/63
  R:V/82[ds[0]] := arg11:V/64
  R:V/83[ds[8]] := clos:V/72
  tailcall I/80 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx] R:I/6[%r8] R:I/7[%r9] R:I/8[%r12] R:I/9[%r13] R:V/82[ds[0]] R:V/83[ds[8]]
*** After instruction selection
caml_curry11_7(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc 48
  [V/63 + -8] := 5367 (init)
  I/64 := "caml_curry11_8"
  val[V/63] := I/64 (init)
  I/65 := 252201579132747783
  val[V/63 + 8] := I/65 (init)
  I/66 := "caml_curry11_8_app"
  val[V/63 + 16] := I/66 (init)
  val[V/63 + 24] := arg:V/61 (init)
  val[V/63 + 32] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry11_8_app(R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi])
  arg9:V/61 := R:I/0[%rax]
  arg10:V/62 := R:I/1[%rbx]
  arg11:V/63 := R:I/2[%rdi]
  clos:V/64 := R:I/3[%rsi]
  clos:V/65 := val  mut[clos:V/64 + 32]
  clos:V/66 := val  mut[clos:V/65 + 32]
  clos:V/67 := val  mut[clos:V/66 + 32]
  clos:V/68 := val  mut[clos:V/67 + 32]
  clos:V/69 := val  mut[clos:V/68 + 32]
  clos:V/70 := val  mut[clos:V/69 + 32]
  clos:V/71 := val  mut[clos:V/70 + 32]
  clos:V/72 := val  mut[clos:V/71 + 32]
  V/73 := val  mut[clos:V/64 + 24]
  V/74 := val  mut[clos:V/65 + 24]
  V/75 := val  mut[clos:V/66 + 24]
  V/76 := val  mut[clos:V/67 + 24]
  V/77 := val  mut[clos:V/68 + 24]
  V/78 := val  mut[clos:V/69 + 24]
  V/79 := val  mut[clos:V/70 + 24]
  V/80 := val  mut[clos:V/71 + 24]
  I/81 := int  mut[clos:V/72 + 16]
  R:I/0[%rax] := V/80
  R:I/1[%rbx] := V/79
  R:I/2[%rdi] := V/78
  R:I/3[%rsi] := V/77
  R:I/4[%rdx] := V/76
  R:I/5[%rcx] := V/75
  R:I/6[%r8] := V/74
  R:I/7[%r9] := V/73
  R:I/8[%r12] := arg9:V/61
  R:I/9[%r13] := arg10:V/62
  R:V/83[ds[0]] := arg11:V/63
  R:V/84[ds[8]] := clos:V/72
  tailcall I/81 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx] R:I/6[%r8] R:I/7[%r9] R:I/8[%r12] R:I/9[%r13] R:V/83[ds[0]] R:V/84[ds[8]]
*** After instruction selection
caml_curry11_8(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc 48
  [V/63 + -8] := 5367 (init)
  I/64 := "caml_curry11_9"
  val[V/63] := I/64 (init)
  I/65 := 180143985094819847
  val[V/63 + 8] := I/65 (init)
  I/66 := "caml_curry11_9_app"
  val[V/63 + 16] := I/66 (init)
  val[V/63 + 24] := arg:V/61 (init)
  val[V/63 + 32] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry11_9_app(R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi])
  arg10:V/61 := R:I/0[%rax]
  arg11:V/62 := R:I/1[%rbx]
  clos:V/63 := R:I/2[%rdi]
  clos:V/64 := val  mut[clos:V/63 + 32]
  clos:V/65 := val  mut[clos:V/64 + 32]
  clos:V/66 := val  mut[clos:V/65 + 32]
  clos:V/67 := val  mut[clos:V/66 + 32]
  clos:V/68 := val  mut[clos:V/67 + 32]
  clos:V/69 := val  mut[clos:V/68 + 32]
  clos:V/70 := val  mut[clos:V/69 + 32]
  clos:V/71 := val  mut[clos:V/70 + 32]
  clos:V/72 := val  mut[clos:V/71 + 32]
  V/73 := val  mut[clos:V/63 + 24]
  V/74 := val  mut[clos:V/64 + 24]
  V/75 := val  mut[clos:V/65 + 24]
  V/76 := val  mut[clos:V/66 + 24]
  V/77 := val  mut[clos:V/67 + 24]
  V/78 := val  mut[clos:V/68 + 24]
  V/79 := val  mut[clos:V/69 + 24]
  V/80 := val  mut[clos:V/70 + 24]
  V/81 := val  mut[clos:V/71 + 24]
  I/82 := int  mut[clos:V/72 + 16]
  R:I/0[%rax] := V/81
  R:I/1[%rbx] := V/80
  R:I/2[%rdi] := V/79
  R:I/3[%rsi] := V/78
  R:I/4[%rdx] := V/77
  R:I/5[%rcx] := V/76
  R:I/6[%r8] := V/75
  R:I/7[%r9] := V/74
  R:I/8[%r12] := V/73
  R:I/9[%r13] := arg10:V/61
  R:V/84[ds[0]] := arg11:V/62
  R:V/85[ds[8]] := clos:V/72
  tailcall I/82 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx] R:I/6[%r8] R:I/7[%r9] R:I/8[%r12] R:I/9[%r13] R:V/84[ds[0]] R:V/85[ds[8]]
*** After instruction selection
caml_curry11_9(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc 40
  [V/63 + -8] := 4343 (init)
  I/64 := "caml_curry11_10"
  val[V/63] := I/64 (init)
  I/65 := 108086391056891909
  val[V/63 + 8] := I/65 (init)
  val[V/63 + 16] := arg:V/61 (init)
  val[V/63 + 24] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry11_10(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  clos:V/63 := val  mut[clos:V/62 + 24]
  clos:V/64 := val  mut[clos:V/63 + 32]
  clos:V/65 := val  mut[clos:V/64 + 32]
  clos:V/66 := val  mut[clos:V/65 + 32]
  clos:V/67 := val  mut[clos:V/66 + 32]
  clos:V/68 := val  mut[clos:V/67 + 32]
  clos:V/69 := val  mut[clos:V/68 + 32]
  clos:V/70 := val  mut[clos:V/69 + 32]
  clos:V/71 := val  mut[clos:V/70 + 32]
  clos:V/72 := val  mut[clos:V/71 + 32]
  V/73 := val  mut[clos:V/62 + 16]
  V/74 := val  mut[clos:V/63 + 24]
  V/75 := val  mut[clos:V/64 + 24]
  V/76 := val  mut[clos:V/65 + 24]
  V/77 := val  mut[clos:V/66 + 24]
  V/78 := val  mut[clos:V/67 + 24]
  V/79 := val  mut[clos:V/68 + 24]
  V/80 := val  mut[clos:V/69 + 24]
  V/81 := val  mut[clos:V/70 + 24]
  V/82 := val  mut[clos:V/71 + 24]
  I/83 := int  mut[clos:V/72 + 16]
  R:I/0[%rax] := V/82
  R:I/1[%rbx] := V/81
  R:I/2[%rdi] := V/80
  R:I/3[%rsi] := V/79
  R:I/4[%rdx] := V/78
  R:I/5[%rcx] := V/77
  R:I/6[%r8] := V/76
  R:I/7[%r9] := V/75
  R:I/8[%r12] := V/74
  R:I/9[%r13] := V/73
  R:V/85[ds[0]] := arg:V/61
  R:V/86[ds[8]] := clos:V/72
  tailcall I/83 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx] R:I/6[%r8] R:I/7[%r9] R:I/8[%r12] R:I/9[%r13] R:V/85[ds[0]] R:V/86[ds[8]]
*** After instruction selection
caml_curry2L1(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc 40
  [V/63 + -8] := 4343 (init)
  I/64 := "caml_curry2L1_1"
  val[V/63] := I/64 (init)
  I/65 := 108086391056891909
  val[V/63 + 8] := I/65 (init)
  val[V/63 + 16] := arg:V/61 (init)
  val[V/63 + 24] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry2L1_1(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  clos:V/63 := val  mut[clos:V/62 + 24]
  V/64 := val  mut[clos:V/62 + 16]
  I/65 := int  mut[clos:V/63 + 16]
  R:I/0[%rax] := V/64
  R:I/1[%rbx] := arg:V/61
  R:I/2[%rdi] := clos:V/63
  tailcall I/65 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi]
*** After instruction selection
caml_curry2L2(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc_local 40
  [V/63 + -8] := 4855 (init)
  I/64 := "caml_curry2L2_1"
  val[V/63] := I/64 (init)
  I/65 := 108086391056891909
  val[V/63 + 8] := I/65 (init)
  val[V/63 + 16] := arg:V/61 (init)
  val[V/63 + 24] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry2L2_1(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  clos:V/63 := val  mut[clos:V/62 + 24]
  V/64 := val  mut[clos:V/62 + 16]
  I/65 := int  mut[clos:V/63 + 16]
  R:I/0[%rax] := V/64
  R:I/1[%rbx] := arg:V/61
  R:I/2[%rdi] := clos:V/63
  tailcall I/65 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi]
*** After instruction selection
caml_curry3L2(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc 48
  [V/63 + -8] := 5367 (init)
  I/64 := "caml_curry3L2_1"
  val[V/63] := I/64 (init)
  I/65 := 180143985094819847
  val[V/63 + 8] := I/65 (init)
  I/66 := "caml_curry3L2_1_app"
  val[V/63 + 16] := I/66 (init)
  val[V/63 + 24] := arg:V/61 (init)
  val[V/63 + 32] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry3L2_1_app(R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi])
  arg2:V/61 := R:I/0[%rax]
  arg3:V/62 := R:I/1[%rbx]
  clos:V/63 := R:I/2[%rdi]
  clos:V/64 := val  mut[clos:V/63 + 32]
  V/65 := val  mut[clos:V/63 + 24]
  I/66 := int  mut[clos:V/64 + 16]
  R:I/0[%rax] := V/65
  R:I/1[%rbx] := arg2:V/61
  R:I/2[%rdi] := arg3:V/62
  R:I/3[%rsi] := clos:V/64
  tailcall I/66 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi]
*** After instruction selection
caml_curry3L2_1(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc_local 40
  [V/63 + -8] := 4855 (init)
  I/64 := "caml_curry3L2_2"
  val[V/63] := I/64 (init)
  I/65 := 108086391056891909
  val[V/63 + 8] := I/65 (init)
  val[V/63 + 16] := arg:V/61 (init)
  val[V/63 + 24] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry3L2_2(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  clos:V/63 := val  mut[clos:V/62 + 24]
  clos:V/64 := val  mut[clos:V/63 + 32]
  V/65 := val  mut[clos:V/62 + 16]
  V/66 := val  mut[clos:V/63 + 24]
  I/67 := int  mut[clos:V/64 + 16]
  R:I/0[%rax] := V/66
  R:I/1[%rbx] := V/65
  R:I/2[%rdi] := arg:V/61
  R:I/3[%rsi] := clos:V/64
  tailcall I/67 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi]
*** After instruction selection
caml_curry4L2(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc 48
  [V/63 + -8] := 5367 (init)
  I/64 := "caml_curry4L2_1"
  val[V/63] := I/64 (init)
  I/65 := 252201579132747783
  val[V/63 + 8] := I/65 (init)
  I/66 := "caml_curry4L2_1_app"
  val[V/63 + 16] := I/66 (init)
  val[V/63 + 24] := arg:V/61 (init)
  val[V/63 + 32] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry4L2_1_app(R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi])
  arg2:V/61 := R:I/0[%rax]
  arg3:V/62 := R:I/1[%rbx]
  arg4:V/63 := R:I/2[%rdi]
  clos:V/64 := R:I/3[%rsi]
  clos:V/65 := val  mut[clos:V/64 + 32]
  V/66 := val  mut[clos:V/64 + 24]
  I/67 := int  mut[clos:V/65 + 16]
  R:I/0[%rax] := V/66
  R:I/1[%rbx] := arg2:V/61
  R:I/2[%rdi] := arg3:V/62
  R:I/3[%rsi] := arg4:V/63
  R:I/4[%rdx] := clos:V/65
  tailcall I/67 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx]
*** After instruction selection
caml_curry4L2_1(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc 48
  [V/63 + -8] := 5367 (init)
  I/64 := "caml_curry4L2_2"
  val[V/63] := I/64 (init)
  I/65 := 180143985094819847
  val[V/63 + 8] := I/65 (init)
  I/66 := "caml_curry4L2_2_app"
  val[V/63 + 16] := I/66 (init)
  val[V/63 + 24] := arg:V/61 (init)
  val[V/63 + 32] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry4L2_2_app(R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi])
  arg3:V/61 := R:I/0[%rax]
  arg4:V/62 := R:I/1[%rbx]
  clos:V/63 := R:I/2[%rdi]
  clos:V/64 := val  mut[clos:V/63 + 32]
  clos:V/65 := val  mut[clos:V/64 + 32]
  V/66 := val  mut[clos:V/63 + 24]
  V/67 := val  mut[clos:V/64 + 24]
  I/68 := int  mut[clos:V/65 + 16]
  R:I/0[%rax] := V/67
  R:I/1[%rbx] := V/66
  R:I/2[%rdi] := arg3:V/61
  R:I/3[%rsi] := arg4:V/62
  R:I/4[%rdx] := clos:V/65
  tailcall I/68 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx]
*** After instruction selection
caml_curry4L2_2(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc_local 40
  [V/63 + -8] := 4855 (init)
  I/64 := "caml_curry4L2_3"
  val[V/63] := I/64 (init)
  I/65 := 108086391056891909
  val[V/63 + 8] := I/65 (init)
  val[V/63 + 16] := arg:V/61 (init)
  val[V/63 + 24] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry4L2_3(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  clos:V/63 := val  mut[clos:V/62 + 24]
  clos:V/64 := val  mut[clos:V/63 + 32]
  clos:V/65 := val  mut[clos:V/64 + 32]
  V/66 := val  mut[clos:V/62 + 16]
  V/67 := val  mut[clos:V/63 + 24]
  V/68 := val  mut[clos:V/64 + 24]
  I/69 := int  mut[clos:V/65 + 16]
  R:I/0[%rax] := V/68
  R:I/1[%rbx] := V/67
  R:I/2[%rdi] := V/66
  R:I/3[%rsi] := arg:V/61
  R:I/4[%rdx] := clos:V/65
  tailcall I/69 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx]
*** After instruction selection
caml_curry3L3(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc_local 48
  [V/63 + -8] := 5879 (init)
  I/64 := "caml_curry3L3_1"
  val[V/63] := I/64 (init)
  I/65 := 180143985094819847
  val[V/63 + 8] := I/65 (init)
  I/66 := "caml_curry3L3_1_app"
  val[V/63 + 16] := I/66 (init)
  val[V/63 + 24] := arg:V/61 (init)
  val[V/63 + 32] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry3L3_1_app(R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi])
  arg2:V/61 := R:I/0[%rax]
  arg3:V/62 := R:I/1[%rbx]
  clos:V/63 := R:I/2[%rdi]
  clos:V/64 := val  mut[clos:V/63 + 32]
  V/65 := val  mut[clos:V/63 + 24]
  I/66 := int  mut[clos:V/64 + 16]
  R:I/0[%rax] := V/65
  R:I/1[%rbx] := arg2:V/61
  R:I/2[%rdi] := arg3:V/62
  R:I/3[%rsi] := clos:V/64
  tailcall I/66 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi]
*** After instruction selection
caml_curry3L3_1(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc_local 40
  [V/63 + -8] := 4855 (init)
  I/64 := "caml_curry3L3_2"
  val[V/63] := I/64 (init)
  I/65 := 108086391056891909
  val[V/63 + 8] := I/65 (init)
  val[V/63 + 16] := arg:V/61 (init)
  val[V/63 + 24] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry3L3_2(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  clos:V/63 := val  mut[clos:V/62 + 24]
  clos:V/64 := val  mut[clos:V/63 + 32]
  V/65 := val  mut[clos:V/62 + 16]
  V/66 := val  mut[clos:V/63 + 24]
  I/67 := int  mut[clos:V/64 + 16]
  R:I/0[%rax] := V/66
  R:I/1[%rbx] := V/65
  R:I/2[%rdi] := arg:V/61
  R:I/3[%rsi] := clos:V/64
  tailcall I/67 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi]
*** After instruction selection
caml_curry5L3(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc 48
  [V/63 + -8] := 5367 (init)
  I/64 := "caml_curry5L3_1"
  val[V/63] := I/64 (init)
  I/65 := 324259173170675719
  val[V/63 + 8] := I/65 (init)
  I/66 := "caml_curry5L3_1_app"
  val[V/63 + 16] := I/66 (init)
  val[V/63 + 24] := arg:V/61 (init)
  val[V/63 + 32] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry5L3_1_app(R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx])
  arg2:V/61 := R:I/0[%rax]
  arg3:V/62 := R:I/1[%rbx]
  arg4:V/63 := R:I/2[%rdi]
  arg5:V/64 := R:I/3[%rsi]
  clos:V/65 := R:I/4[%rdx]
  clos:V/66 := val  mut[clos:V/65 + 32]
  V/67 := val  mut[clos:V/65 + 24]
  I/68 := int  mut[clos:V/66 + 16]
  R:I/0[%rax] := V/67
  R:I/1[%rbx] := arg2:V/61
  R:I/2[%rdi] := arg3:V/62
  R:I/3[%rsi] := arg4:V/63
  R:I/4[%rdx] := arg5:V/64
  R:I/5[%rcx] := clos:V/66
  tailcall I/68 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx]
*** After instruction selection
caml_curry5L3_1(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc 48
  [V/63 + -8] := 5367 (init)
  I/64 := "caml_curry5L3_2"
  val[V/63] := I/64 (init)
  I/65 := 252201579132747783
  val[V/63 + 8] := I/65 (init)
  I/66 := "caml_curry5L3_2_app"
  val[V/63 + 16] := I/66 (init)
  val[V/63 + 24] := arg:V/61 (init)
  val[V/63 + 32] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry5L3_2_app(R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi])
  arg3:V/61 := R:I/0[%rax]
  arg4:V/62 := R:I/1[%rbx]
  arg5:V/63 := R:I/2[%rdi]
  clos:V/64 := R:I/3[%rsi]
  clos:V/65 := val  mut[clos:V/64 + 32]
  clos:V/66 := val  mut[clos:V/65 + 32]
  V/67 := val  mut[clos:V/64 + 24]
  V/68 := val  mut[clos:V/65 + 24]
  I/69 := int  mut[clos:V/66 + 16]
  R:I/0[%rax] := V/68
  R:I/1[%rbx] := V/67
  R:I/2[%rdi] := arg3:V/61
  R:I/3[%rsi] := arg4:V/62
  R:I/4[%rdx] := arg5:V/63
  R:I/5[%rcx] := clos:V/66
  tailcall I/69 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx]
*** After instruction selection
caml_curry5L3_2(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc_local 48
  [V/63 + -8] := 5879 (init)
  I/64 := "caml_curry5L3_3"
  val[V/63] := I/64 (init)
  I/65 := 180143985094819847
  val[V/63 + 8] := I/65 (init)
  I/66 := "caml_curry5L3_3_app"
  val[V/63 + 16] := I/66 (init)
  val[V/63 + 24] := arg:V/61 (init)
  val[V/63 + 32] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry5L3_3_app(R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi])
  arg4:V/61 := R:I/0[%rax]
  arg5:V/62 := R:I/1[%rbx]
  clos:V/63 := R:I/2[%rdi]
  clos:V/64 := val  mut[clos:V/63 + 32]
  clos:V/65 := val  mut[clos:V/64 + 32]
  clos:V/66 := val  mut[clos:V/65 + 32]
  V/67 := val  mut[clos:V/63 + 24]
  V/68 := val  mut[clos:V/64 + 24]
  V/69 := val  mut[clos:V/65 + 24]
  I/70 := int  mut[clos:V/66 + 16]
  R:I/0[%rax] := V/69
  R:I/1[%rbx] := V/68
  R:I/2[%rdi] := V/67
  R:I/3[%rsi] := arg4:V/61
  R:I/4[%rdx] := arg5:V/62
  R:I/5[%rcx] := clos:V/66
  tailcall I/70 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx]
*** After instruction selection
caml_curry5L3_3(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc_local 40
  [V/63 + -8] := 4855 (init)
  I/64 := "caml_curry5L3_4"
  val[V/63] := I/64 (init)
  I/65 := 108086391056891909
  val[V/63 + 8] := I/65 (init)
  val[V/63 + 16] := arg:V/61 (init)
  val[V/63 + 24] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry5L3_4(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  clos:V/63 := val  mut[clos:V/62 + 24]
  clos:V/64 := val  mut[clos:V/63 + 32]
  clos:V/65 := val  mut[clos:V/64 + 32]
  clos:V/66 := val  mut[clos:V/65 + 32]
  V/67 := val  mut[clos:V/62 + 16]
  V/68 := val  mut[clos:V/63 + 24]
  V/69 := val  mut[clos:V/64 + 24]
  V/70 := val  mut[clos:V/65 + 24]
  I/71 := int  mut[clos:V/66 + 16]
  R:I/0[%rax] := V/70
  R:I/1[%rbx] := V/69
  R:I/2[%rdi] := V/68
  R:I/3[%rsi] := V/67
  R:I/4[%rdx] := arg:V/61
  R:I/5[%rcx] := clos:V/66
  tailcall I/71 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx]
*** After instruction selection
caml_curry4L4(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc_local 48
  [V/63 + -8] := 5879 (init)
  I/64 := "caml_curry4L4_1"
  val[V/63] := I/64 (init)
  I/65 := 252201579132747783
  val[V/63 + 8] := I/65 (init)
  I/66 := "caml_curry4L4_1_app"
  val[V/63 + 16] := I/66 (init)
  val[V/63 + 24] := arg:V/61 (init)
  val[V/63 + 32] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry4L4_1_app(R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi])
  arg2:V/61 := R:I/0[%rax]
  arg3:V/62 := R:I/1[%rbx]
  arg4:V/63 := R:I/2[%rdi]
  clos:V/64 := R:I/3[%rsi]
  clos:V/65 := val  mut[clos:V/64 + 32]
  V/66 := val  mut[clos:V/64 + 24]
  I/67 := int  mut[clos:V/65 + 16]
  R:I/0[%rax] := V/66
  R:I/1[%rbx] := arg2:V/61
  R:I/2[%rdi] := arg3:V/62
  R:I/3[%rsi] := arg4:V/63
  R:I/4[%rdx] := clos:V/65
  tailcall I/67 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx]
*** After instruction selection
caml_curry4L4_1(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc_local 48
  [V/63 + -8] := 5879 (init)
  I/64 := "caml_curry4L4_2"
  val[V/63] := I/64 (init)
  I/65 := 180143985094819847
  val[V/63 + 8] := I/65 (init)
  I/66 := "caml_curry4L4_2_app"
  val[V/63 + 16] := I/66 (init)
  val[V/63 + 24] := arg:V/61 (init)
  val[V/63 + 32] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry4L4_2_app(R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi])
  arg3:V/61 := R:I/0[%rax]
  arg4:V/62 := R:I/1[%rbx]
  clos:V/63 := R:I/2[%rdi]
  clos:V/64 := val  mut[clos:V/63 + 32]
  clos:V/65 := val  mut[clos:V/64 + 32]
  V/66 := val  mut[clos:V/63 + 24]
  V/67 := val  mut[clos:V/64 + 24]
  I/68 := int  mut[clos:V/65 + 16]
  R:I/0[%rax] := V/67
  R:I/1[%rbx] := V/66
  R:I/2[%rdi] := arg3:V/61
  R:I/3[%rsi] := arg4:V/62
  R:I/4[%rdx] := clos:V/65
  tailcall I/68 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx]
*** After instruction selection
caml_curry4L4_2(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc_local 40
  [V/63 + -8] := 4855 (init)
  I/64 := "caml_curry4L4_3"
  val[V/63] := I/64 (init)
  I/65 := 108086391056891909
  val[V/63 + 8] := I/65 (init)
  val[V/63 + 16] := arg:V/61 (init)
  val[V/63 + 24] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry4L4_3(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  clos:V/63 := val  mut[clos:V/62 + 24]
  clos:V/64 := val  mut[clos:V/63 + 32]
  clos:V/65 := val  mut[clos:V/64 + 32]
  V/66 := val  mut[clos:V/62 + 16]
  V/67 := val  mut[clos:V/63 + 24]
  V/68 := val  mut[clos:V/64 + 24]
  I/69 := int  mut[clos:V/65 + 16]
  R:I/0[%rax] := V/68
  R:I/1[%rbx] := V/67
  R:I/2[%rdi] := V/66
  R:I/3[%rsi] := arg:V/61
  R:I/4[%rdx] := clos:V/65
  tailcall I/69 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx]
*** After instruction selection
caml_curry5L5(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc_local 48
  [V/63 + -8] := 5879 (init)
  I/64 := "caml_curry5L5_1"
  val[V/63] := I/64 (init)
  I/65 := 324259173170675719
  val[V/63 + 8] := I/65 (init)
  I/66 := "caml_curry5L5_1_app"
  val[V/63 + 16] := I/66 (init)
  val[V/63 + 24] := arg:V/61 (init)
  val[V/63 + 32] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry5L5_1_app(R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx])
  arg2:V/61 := R:I/0[%rax]
  arg3:V/62 := R:I/1[%rbx]
  arg4:V/63 := R:I/2[%rdi]
  arg5:V/64 := R:I/3[%rsi]
  clos:V/65 := R:I/4[%rdx]
  clos:V/66 := val  mut[clos:V/65 + 32]
  V/67 := val  mut[clos:V/65 + 24]
  I/68 := int  mut[clos:V/66 + 16]
  R:I/0[%rax] := V/67
  R:I/1[%rbx] := arg2:V/61
  R:I/2[%rdi] := arg3:V/62
  R:I/3[%rsi] := arg4:V/63
  R:I/4[%rdx] := arg5:V/64
  R:I/5[%rcx] := clos:V/66
  tailcall I/68 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx]
*** After instruction selection
caml_curry5L5_1(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc_local 48
  [V/63 + -8] := 5879 (init)
  I/64 := "caml_curry5L5_2"
  val[V/63] := I/64 (init)
  I/65 := 252201579132747783
  val[V/63 + 8] := I/65 (init)
  I/66 := "caml_curry5L5_2_app"
  val[V/63 + 16] := I/66 (init)
  val[V/63 + 24] := arg:V/61 (init)
  val[V/63 + 32] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry5L5_2_app(R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi])
  arg3:V/61 := R:I/0[%rax]
  arg4:V/62 := R:I/1[%rbx]
  arg5:V/63 := R:I/2[%rdi]
  clos:V/64 := R:I/3[%rsi]
  clos:V/65 := val  mut[clos:V/64 + 32]
  clos:V/66 := val  mut[clos:V/65 + 32]
  V/67 := val  mut[clos:V/64 + 24]
  V/68 := val  mut[clos:V/65 + 24]
  I/69 := int  mut[clos:V/66 + 16]
  R:I/0[%rax] := V/68
  R:I/1[%rbx] := V/67
  R:I/2[%rdi] := arg3:V/61
  R:I/3[%rsi] := arg4:V/62
  R:I/4[%rdx] := arg5:V/63
  R:I/5[%rcx] := clos:V/66
  tailcall I/69 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx]
*** After instruction selection
caml_curry5L5_2(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc_local 48
  [V/63 + -8] := 5879 (init)
  I/64 := "caml_curry5L5_3"
  val[V/63] := I/64 (init)
  I/65 := 180143985094819847
  val[V/63 + 8] := I/65 (init)
  I/66 := "caml_curry5L5_3_app"
  val[V/63 + 16] := I/66 (init)
  val[V/63 + 24] := arg:V/61 (init)
  val[V/63 + 32] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry5L5_3_app(R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi])
  arg4:V/61 := R:I/0[%rax]
  arg5:V/62 := R:I/1[%rbx]
  clos:V/63 := R:I/2[%rdi]
  clos:V/64 := val  mut[clos:V/63 + 32]
  clos:V/65 := val  mut[clos:V/64 + 32]
  clos:V/66 := val  mut[clos:V/65 + 32]
  V/67 := val  mut[clos:V/63 + 24]
  V/68 := val  mut[clos:V/64 + 24]
  V/69 := val  mut[clos:V/65 + 24]
  I/70 := int  mut[clos:V/66 + 16]
  R:I/0[%rax] := V/69
  R:I/1[%rbx] := V/68
  R:I/2[%rdi] := V/67
  R:I/3[%rsi] := arg4:V/61
  R:I/4[%rdx] := arg5:V/62
  R:I/5[%rcx] := clos:V/66
  tailcall I/70 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx]
*** After instruction selection
caml_curry5L5_3(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc_local 40
  [V/63 + -8] := 4855 (init)
  I/64 := "caml_curry5L5_4"
  val[V/63] := I/64 (init)
  I/65 := 108086391056891909
  val[V/63 + 8] := I/65 (init)
  val[V/63 + 16] := arg:V/61 (init)
  val[V/63 + 24] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry5L5_4(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  clos:V/63 := val  mut[clos:V/62 + 24]
  clos:V/64 := val  mut[clos:V/63 + 32]
  clos:V/65 := val  mut[clos:V/64 + 32]
  clos:V/66 := val  mut[clos:V/65 + 32]
  V/67 := val  mut[clos:V/62 + 16]
  V/68 := val  mut[clos:V/63 + 24]
  V/69 := val  mut[clos:V/64 + 24]
  V/70 := val  mut[clos:V/65 + 24]
  I/71 := int  mut[clos:V/66 + 16]
  R:I/0[%rax] := V/70
  R:I/1[%rbx] := V/69
  R:I/2[%rdi] := V/68
  R:I/3[%rsi] := V/67
  R:I/4[%rdx] := arg:V/61
  R:I/5[%rcx] := clos:V/66
  tailcall I/71 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx]
*** After instruction selection
caml_curry6L6(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc_local 48
  [V/63 + -8] := 5879 (init)
  I/64 := "caml_curry6L6_1"
  val[V/63] := I/64 (init)
  I/65 := 396316767208603655
  val[V/63 + 8] := I/65 (init)
  I/66 := "caml_curry6L6_1_app"
  val[V/63 + 16] := I/66 (init)
  val[V/63 + 24] := arg:V/61 (init)
  val[V/63 + 32] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry6L6_1_app(R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx])
  arg2:V/61 := R:I/0[%rax]
  arg3:V/62 := R:I/1[%rbx]
  arg4:V/63 := R:I/2[%rdi]
  arg5:V/64 := R:I/3[%rsi]
  arg6:V/65 := R:I/4[%rdx]
  clos:V/66 := R:I/5[%rcx]
  clos:V/67 := val  mut[clos:V/66 + 32]
  V/68 := val  mut[clos:V/66 + 24]
  I/69 := int  mut[clos:V/67 + 16]
  R:I/0[%rax] := V/68
  R:I/1[%rbx] := arg2:V/61
  R:I/2[%rdi] := arg3:V/62
  R:I/3[%rsi] := arg4:V/63
  R:I/4[%rdx] := arg5:V/64
  R:I/5[%rcx] := arg6:V/65
  R:I/6[%r8] := clos:V/67
  tailcall I/69 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx] R:I/6[%r8]
*** After instruction selection
caml_curry6L6_1(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc_local 48
  [V/63 + -8] := 5879 (init)
  I/64 := "caml_curry6L6_2"
  val[V/63] := I/64 (init)
  I/65 := 324259173170675719
  val[V/63 + 8] := I/65 (init)
  I/66 := "caml_curry6L6_2_app"
  val[V/63 + 16] := I/66 (init)
  val[V/63 + 24] := arg:V/61 (init)
  val[V/63 + 32] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry6L6_2_app(R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx])
  arg3:V/61 := R:I/0[%rax]
  arg4:V/62 := R:I/1[%rbx]
  arg5:V/63 := R:I/2[%rdi]
  arg6:V/64 := R:I/3[%rsi]
  clos:V/65 := R:I/4[%rdx]
  clos:V/66 := val  mut[clos:V/65 + 32]
  clos:V/67 := val  mut[clos:V/66 + 32]
  V/68 := val  mut[clos:V/65 + 24]
  V/69 := val  mut[clos:V/66 + 24]
  I/70 := int  mut[clos:V/67 + 16]
  R:I/0[%rax] := V/69
  R:I/1[%rbx] := V/68
  R:I/2[%rdi] := arg3:V/61
  R:I/3[%rsi] := arg4:V/62
  R:I/4[%rdx] := arg5:V/63
  R:I/5[%rcx] := arg6:V/64
  R:I/6[%r8] := clos:V/67
  tailcall I/70 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx] R:I/6[%r8]
*** After instruction selection
caml_curry6L6_2(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc_local 48
  [V/63 + -8] := 5879 (init)
  I/64 := "caml_curry6L6_3"
  val[V/63] := I/64 (init)
  I/65 := 252201579132747783
  val[V/63 + 8] := I/65 (init)
  I/66 := "caml_curry6L6_3_app"
  val[V/63 + 16] := I/66 (init)
  val[V/63 + 24] := arg:V/61 (init)
  val[V/63 + 32] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry6L6_3_app(R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi])
  arg4:V/61 := R:I/0[%rax]
  arg5:V/62 := R:I/1[%rbx]
  arg6:V/63 := R:I/2[%rdi]
  clos:V/64 := R:I/3[%rsi]
  clos:V/65 := val  mut[clos:V/64 + 32]
  clos:V/66 := val  mut[clos:V/65 + 32]
  clos:V/67 := val  mut[clos:V/66 + 32]
  V/68 := val  mut[clos:V/64 + 24]
  V/69 := val  mut[clos:V/65 + 24]
  V/70 := val  mut[clos:V/66 + 24]
  I/71 := int  mut[clos:V/67 + 16]
  R:I/0[%rax] := V/70
  R:I/1[%rbx] := V/69
  R:I/2[%rdi] := V/68
  R:I/3[%rsi] := arg4:V/61
  R:I/4[%rdx] := arg5:V/62
  R:I/5[%rcx] := arg6:V/63
  R:I/6[%r8] := clos:V/67
  tailcall I/71 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx] R:I/6[%r8]
*** After instruction selection
caml_curry6L6_3(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc_local 48
  [V/63 + -8] := 5879 (init)
  I/64 := "caml_curry6L6_4"
  val[V/63] := I/64 (init)
  I/65 := 180143985094819847
  val[V/63 + 8] := I/65 (init)
  I/66 := "caml_curry6L6_4_app"
  val[V/63 + 16] := I/66 (init)
  val[V/63 + 24] := arg:V/61 (init)
  val[V/63 + 32] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry6L6_4_app(R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi])
  arg5:V/61 := R:I/0[%rax]
  arg6:V/62 := R:I/1[%rbx]
  clos:V/63 := R:I/2[%rdi]
  clos:V/64 := val  mut[clos:V/63 + 32]
  clos:V/65 := val  mut[clos:V/64 + 32]
  clos:V/66 := val  mut[clos:V/65 + 32]
  clos:V/67 := val  mut[clos:V/66 + 32]
  V/68 := val  mut[clos:V/63 + 24]
  V/69 := val  mut[clos:V/64 + 24]
  V/70 := val  mut[clos:V/65 + 24]
  V/71 := val  mut[clos:V/66 + 24]
  I/72 := int  mut[clos:V/67 + 16]
  R:I/0[%rax] := V/71
  R:I/1[%rbx] := V/70
  R:I/2[%rdi] := V/69
  R:I/3[%rsi] := V/68
  R:I/4[%rdx] := arg5:V/61
  R:I/5[%rcx] := arg6:V/62
  R:I/6[%r8] := clos:V/67
  tailcall I/72 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx] R:I/6[%r8]
*** After instruction selection
caml_curry6L6_4(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc_local 40
  [V/63 + -8] := 4855 (init)
  I/64 := "caml_curry6L6_5"
  val[V/63] := I/64 (init)
  I/65 := 108086391056891909
  val[V/63 + 8] := I/65 (init)
  val[V/63 + 16] := arg:V/61 (init)
  val[V/63 + 24] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry6L6_5(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  clos:V/63 := val  mut[clos:V/62 + 24]
  clos:V/64 := val  mut[clos:V/63 + 32]
  clos:V/65 := val  mut[clos:V/64 + 32]
  clos:V/66 := val  mut[clos:V/65 + 32]
  clos:V/67 := val  mut[clos:V/66 + 32]
  V/68 := val  mut[clos:V/62 + 16]
  V/69 := val  mut[clos:V/63 + 24]
  V/70 := val  mut[clos:V/64 + 24]
  V/71 := val  mut[clos:V/65 + 24]
  V/72 := val  mut[clos:V/66 + 24]
  I/73 := int  mut[clos:V/67 + 16]
  R:I/0[%rax] := V/72
  R:I/1[%rbx] := V/71
  R:I/2[%rdi] := V/70
  R:I/3[%rsi] := V/69
  R:I/4[%rdx] := V/68
  R:I/5[%rcx] := arg:V/61
  R:I/6[%r8] := clos:V/67
  tailcall I/73 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx] R:I/6[%r8]
*** After instruction selection
caml_curry7L7(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc_local 48
  [V/63 + -8] := 5879 (init)
  I/64 := "caml_curry7L7_1"
  val[V/63] := I/64 (init)
  I/65 := 468374361246531591
  val[V/63 + 8] := I/65 (init)
  I/66 := "caml_curry7L7_1_app"
  val[V/63 + 16] := I/66 (init)
  val[V/63 + 24] := arg:V/61 (init)
  val[V/63 + 32] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry7L7_1_app(R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx] R:I/6[%r8])
  arg2:V/61 := R:I/0[%rax]
  arg3:V/62 := R:I/1[%rbx]
  arg4:V/63 := R:I/2[%rdi]
  arg5:V/64 := R:I/3[%rsi]
  arg6:V/65 := R:I/4[%rdx]
  arg7:V/66 := R:I/5[%rcx]
  clos:V/67 := R:I/6[%r8]
  clos:V/68 := val  mut[clos:V/67 + 32]
  V/69 := val  mut[clos:V/67 + 24]
  I/70 := int  mut[clos:V/68 + 16]
  R:I/0[%rax] := V/69
  R:I/1[%rbx] := arg2:V/61
  R:I/2[%rdi] := arg3:V/62
  R:I/3[%rsi] := arg4:V/63
  R:I/4[%rdx] := arg5:V/64
  R:I/5[%rcx] := arg6:V/65
  R:I/6[%r8] := arg7:V/66
  R:I/7[%r9] := clos:V/68
  tailcall I/70 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx] R:I/6[%r8] R:I/7[%r9]
*** After instruction selection
caml_curry7L7_1(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc_local 48
  [V/63 + -8] := 5879 (init)
  I/64 := "caml_curry7L7_2"
  val[V/63] := I/64 (init)
  I/65 := 396316767208603655
  val[V/63 + 8] := I/65 (init)
  I/66 := "caml_curry7L7_2_app"
  val[V/63 + 16] := I/66 (init)
  val[V/63 + 24] := arg:V/61 (init)
  val[V/63 + 32] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry7L7_2_app(R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx])
  arg3:V/61 := R:I/0[%rax]
  arg4:V/62 := R:I/1[%rbx]
  arg5:V/63 := R:I/2[%rdi]
  arg6:V/64 := R:I/3[%rsi]
  arg7:V/65 := R:I/4[%rdx]
  clos:V/66 := R:I/5[%rcx]
  clos:V/67 := val  mut[clos:V/66 + 32]
  clos:V/68 := val  mut[clos:V/67 + 32]
  V/69 := val  mut[clos:V/66 + 24]
  V/70 := val  mut[clos:V/67 + 24]
  I/71 := int  mut[clos:V/68 + 16]
  R:I/0[%rax] := V/70
  R:I/1[%rbx] := V/69
  R:I/2[%rdi] := arg3:V/61
  R:I/3[%rsi] := arg4:V/62
  R:I/4[%rdx] := arg5:V/63
  R:I/5[%rcx] := arg6:V/64
  R:I/6[%r8] := arg7:V/65
  R:I/7[%r9] := clos:V/68
  tailcall I/71 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx] R:I/6[%r8] R:I/7[%r9]
*** After instruction selection
caml_curry7L7_2(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc_local 48
  [V/63 + -8] := 5879 (init)
  I/64 := "caml_curry7L7_3"
  val[V/63] := I/64 (init)
  I/65 := 324259173170675719
  val[V/63 + 8] := I/65 (init)
  I/66 := "caml_curry7L7_3_app"
  val[V/63 + 16] := I/66 (init)
  val[V/63 + 24] := arg:V/61 (init)
  val[V/63 + 32] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry7L7_3_app(R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx])
  arg4:V/61 := R:I/0[%rax]
  arg5:V/62 := R:I/1[%rbx]
  arg6:V/63 := R:I/2[%rdi]
  arg7:V/64 := R:I/3[%rsi]
  clos:V/65 := R:I/4[%rdx]
  clos:V/66 := val  mut[clos:V/65 + 32]
  clos:V/67 := val  mut[clos:V/66 + 32]
  clos:V/68 := val  mut[clos:V/67 + 32]
  V/69 := val  mut[clos:V/65 + 24]
  V/70 := val  mut[clos:V/66 + 24]
  V/71 := val  mut[clos:V/67 + 24]
  I/72 := int  mut[clos:V/68 + 16]
  R:I/0[%rax] := V/71
  R:I/1[%rbx] := V/70
  R:I/2[%rdi] := V/69
  R:I/3[%rsi] := arg4:V/61
  R:I/4[%rdx] := arg5:V/62
  R:I/5[%rcx] := arg6:V/63
  R:I/6[%r8] := arg7:V/64
  R:I/7[%r9] := clos:V/68
  tailcall I/72 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx] R:I/6[%r8] R:I/7[%r9]
*** After instruction selection
caml_curry7L7_3(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc_local 48
  [V/63 + -8] := 5879 (init)
  I/64 := "caml_curry7L7_4"
  val[V/63] := I/64 (init)
  I/65 := 252201579132747783
  val[V/63 + 8] := I/65 (init)
  I/66 := "caml_curry7L7_4_app"
  val[V/63 + 16] := I/66 (init)
  val[V/63 + 24] := arg:V/61 (init)
  val[V/63 + 32] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry7L7_4_app(R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi])
  arg5:V/61 := R:I/0[%rax]
  arg6:V/62 := R:I/1[%rbx]
  arg7:V/63 := R:I/2[%rdi]
  clos:V/64 := R:I/3[%rsi]
  clos:V/65 := val  mut[clos:V/64 + 32]
  clos:V/66 := val  mut[clos:V/65 + 32]
  clos:V/67 := val  mut[clos:V/66 + 32]
  clos:V/68 := val  mut[clos:V/67 + 32]
  V/69 := val  mut[clos:V/64 + 24]
  V/70 := val  mut[clos:V/65 + 24]
  V/71 := val  mut[clos:V/66 + 24]
  V/72 := val  mut[clos:V/67 + 24]
  I/73 := int  mut[clos:V/68 + 16]
  R:I/0[%rax] := V/72
  R:I/1[%rbx] := V/71
  R:I/2[%rdi] := V/70
  R:I/3[%rsi] := V/69
  R:I/4[%rdx] := arg5:V/61
  R:I/5[%rcx] := arg6:V/62
  R:I/6[%r8] := arg7:V/63
  R:I/7[%r9] := clos:V/68
  tailcall I/73 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx] R:I/6[%r8] R:I/7[%r9]
*** After instruction selection
caml_curry7L7_4(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc_local 48
  [V/63 + -8] := 5879 (init)
  I/64 := "caml_curry7L7_5"
  val[V/63] := I/64 (init)
  I/65 := 180143985094819847
  val[V/63 + 8] := I/65 (init)
  I/66 := "caml_curry7L7_5_app"
  val[V/63 + 16] := I/66 (init)
  val[V/63 + 24] := arg:V/61 (init)
  val[V/63 + 32] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry7L7_5_app(R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi])
  arg6:V/61 := R:I/0[%rax]
  arg7:V/62 := R:I/1[%rbx]
  clos:V/63 := R:I/2[%rdi]
  clos:V/64 := val  mut[clos:V/63 + 32]
  clos:V/65 := val  mut[clos:V/64 + 32]
  clos:V/66 := val  mut[clos:V/65 + 32]
  clos:V/67 := val  mut[clos:V/66 + 32]
  clos:V/68 := val  mut[clos:V/67 + 32]
  V/69 := val  mut[clos:V/63 + 24]
  V/70 := val  mut[clos:V/64 + 24]
  V/71 := val  mut[clos:V/65 + 24]
  V/72 := val  mut[clos:V/66 + 24]
  V/73 := val  mut[clos:V/67 + 24]
  I/74 := int  mut[clos:V/68 + 16]
  R:I/0[%rax] := V/73
  R:I/1[%rbx] := V/72
  R:I/2[%rdi] := V/71
  R:I/3[%rsi] := V/70
  R:I/4[%rdx] := V/69
  R:I/5[%rcx] := arg6:V/61
  R:I/6[%r8] := arg7:V/62
  R:I/7[%r9] := clos:V/68
  tailcall I/74 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx] R:I/6[%r8] R:I/7[%r9]
*** After instruction selection
caml_curry7L7_5(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  V/63 := alloc_local 40
  [V/63 + -8] := 4855 (init)
  I/64 := "caml_curry7L7_6"
  val[V/63] := I/64 (init)
  I/65 := 108086391056891909
  val[V/63 + 8] := I/65 (init)
  val[V/63 + 16] := arg:V/61 (init)
  val[V/63 + 24] := clos:V/62 (init)
  R:I/0[%rax] := V/63
  return R:I/0[%rax]
*** After instruction selection
caml_curry7L7_6(R:I/0[%rax] R:I/1[%rbx])
  arg:V/61 := R:I/0[%rax]
  clos:V/62 := R:I/1[%rbx]
  clos:V/63 := val  mut[clos:V/62 + 24]
  clos:V/64 := val  mut[clos:V/63 + 32]
  clos:V/65 := val  mut[clos:V/64 + 32]
  clos:V/66 := val  mut[clos:V/65 + 32]
  clos:V/67 := val  mut[clos:V/66 + 32]
  clos:V/68 := val  mut[clos:V/67 + 32]
  V/69 := val  mut[clos:V/62 + 16]
  V/70 := val  mut[clos:V/63 + 24]
  V/71 := val  mut[clos:V/64 + 24]
  V/72 := val  mut[clos:V/65 + 24]
  V/73 := val  mut[clos:V/66 + 24]
  V/74 := val  mut[clos:V/67 + 24]
  I/75 := int  mut[clos:V/68 + 16]
  R:I/0[%rax] := V/74
  R:I/1[%rbx] := V/73
  R:I/2[%rdi] := V/72
  R:I/3[%rsi] := V/71
  R:I/4[%rdx] := V/70
  R:I/5[%rcx] := V/69
  R:I/6[%r8] := arg:V/61
  R:I/7[%r9] := clos:V/68
  tailcall I/75 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx] R:I/6[%r8] R:I/7[%r9]
*** After instruction selection
caml_send0(R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi])
  arg:V/61 := R:I/0[%rax]
  tag:I/62 := R:I/1[%rbx]
  cache:A/63 := R:I/2[%rdi]
  meths:V/64 := val  mut[arg:V/61]
  V/65 := val  mut[meths:V/64 + 8]
  I/66 := int  mut[cache:A/63]
  cached:I/67 := I/66
  cached:I/67 := cached:I/67 & V/65
  I/68 := int  mut[cached:I/67 + meths:V/64 + 23]
  if I/68 !=u tag:I/62 then
    I/69 := 3
    *li*:I/70 := I/69
    I/71 := int  mut[meths:V/64]
    *hi*:I/72 := I/71
    catch
      catch rec
        exit(6)
      with(6)
        I/73 := *li*:I/70
        I/73 := I/73 + *hi*:I/72
        I/74 := I/73
        I/74 := I/74 >>u 1
        *mi*:I/75 := I/74
        *mi*:I/75 := *mi*:I/75 | 1
        I/76 := int  mut[meths:V/64 + *mi*:I/75 * 8]
        if tag:I/62 <s I/76 then
          I/77 := *mi*:I/75
          I/77 := I/77 - 2
          *hi*:I/72 := I/77
        else
          *li*:I/70 := *mi*:I/75
        endif
        if *li*:I/70 >=s *hi*:I/72 then
          exit(5)
        endif
        exit(6)
        
      endcatch
    with(5)
      
      
    endcatch
    *tagged*:I/78 := *li*:I/70  * 8 + -23
    val[cache:A/63] := *tagged*:I/78 (assign)
    real:I/79 := *tagged*:I/78
  else
    real:I/79 := cached:I/67
  endif
  clos:V/80 := val  mut[real:I/79 + meths:V/64 + 15]
  region:I/81 := beginregion
  I/82 := beginregion
  if region:I/81 ==s I/82 then
    I/85 := int  mut[clos:V/80]
    R:I/0[%rax] := arg:V/61
    R:I/1[%rbx] := clos:V/80
    tailcall I/85 R:I/0[%rax] R:I/1[%rbx]
  else
    I/83 := int  mut[clos:V/80]
    R:I/0[%rax] := arg:V/61
    R:I/1[%rbx] := clos:V/80
    R:I/0[%rax] := call I/83 R:I/0[%rax] R:I/1[%rbx]
    result:V/84 := R:I/0[%rax]
    endregion region:I/81
    R:I/0[%rax] := result:V/84
    return R:I/0[%rax]
  endif
*** After instruction selection
caml_apply2(R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi])
  arg:V/61 := R:I/0[%rax]
  arg:V/62 := R:I/1[%rbx]
  clos:V/63 := R:I/2[%rdi]
  V/64 := val  mut[clos:V/63 + 8]
  I/65 := V/64
  I/65 := I/65 >>s 56
  if I/65 ==s 2 then
    I/74 := int  mut[clos:V/63 + 16]
    R:I/0[%rax] := arg:V/61
    R:I/1[%rbx] := arg:V/62
    R:I/2[%rdi] := clos:V/63
    tailcall I/74 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi]
  else
    region:I/66 := beginregion
    I/67 := int  mut[clos:V/63]
    R:I/0[%rax] := arg:V/61
    R:I/1[%rbx] := clos:V/63
    R:I/0[%rax] := call I/67 R:I/0[%rax] R:I/1[%rbx]
    clos:V/68 := R:I/0[%rax]
    I/69 := beginregion
    if region:I/66 ==s I/69 then
      I/72 := int  mut[clos:V/68]
      R:I/0[%rax] := arg:V/62
      R:I/1[%rbx] := clos:V/68
      tailcall I/72 R:I/0[%rax] R:I/1[%rbx]
    else
      I/70 := int  mut[clos:V/68]
      R:I/0[%rax] := arg:V/62
      R:I/1[%rbx] := clos:V/68
      R:I/0[%rax] := call I/70 R:I/0[%rax] R:I/1[%rbx]
      result:V/71 := R:I/0[%rax]
      endregion region:I/66
      R:I/0[%rax] := result:V/71
      return R:I/0[%rax]
    endif
  endif
*** After instruction selection
caml_apply2L(R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi])
  arg:V/61 := R:I/0[%rax]
  arg:V/62 := R:I/1[%rbx]
  clos:V/63 := R:I/2[%rdi]
  V/64 := val  mut[clos:V/63 + 8]
  I/65 := V/64
  I/65 := I/65 >>s 56
  if I/65 ==s 2 then
    I/70 := int  mut[clos:V/63 + 16]
    R:I/0[%rax] := arg:V/61
    R:I/1[%rbx] := arg:V/62
    R:I/2[%rdi] := clos:V/63
    tailcall I/70 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi]
  else
    I/66 := int  mut[clos:V/63]
    R:I/0[%rax] := arg:V/61
    R:I/1[%rbx] := clos:V/63
    R:I/0[%rax] := call I/66 R:I/0[%rax] R:I/1[%rbx]
    clos:V/67 := R:I/0[%rax]
    I/68 := int  mut[clos:V/67]
    R:I/0[%rax] := arg:V/62
    R:I/1[%rbx] := clos:V/67
    tailcall I/68 R:I/0[%rax] R:I/1[%rbx]
  endif
*** After instruction selection
caml_apply3(R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi])
  arg:V/61 := R:I/0[%rax]
  arg:V/62 := R:I/1[%rbx]
  arg:V/63 := R:I/2[%rdi]
  clos:V/64 := R:I/3[%rsi]
  V/65 := val  mut[clos:V/64 + 8]
  I/66 := V/65
  I/66 := I/66 >>s 56
  if I/66 ==s 3 then
    I/77 := int  mut[clos:V/64 + 16]
    R:I/0[%rax] := arg:V/61
    R:I/1[%rbx] := arg:V/62
    R:I/2[%rdi] := arg:V/63
    R:I/3[%rsi] := clos:V/64
    tailcall I/77 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi]
  else
    region:I/67 := beginregion
    I/68 := int  mut[clos:V/64]
    R:I/0[%rax] := arg:V/61
    R:I/1[%rbx] := clos:V/64
    R:I/0[%rax] := call I/68 R:I/0[%rax] R:I/1[%rbx]
    clos:V/69 := R:I/0[%rax]
    I/70 := int  mut[clos:V/69]
    R:I/0[%rax] := arg:V/62
    R:I/1[%rbx] := clos:V/69
    R:I/0[%rax] := call I/70 R:I/0[%rax] R:I/1[%rbx]
    clos:V/71 := R:I/0[%rax]
    I/72 := beginregion
    if region:I/67 ==s I/72 then
      I/75 := int  mut[clos:V/71]
      R:I/0[%rax] := arg:V/63
      R:I/1[%rbx] := clos:V/71
      tailcall I/75 R:I/0[%rax] R:I/1[%rbx]
    else
      I/73 := int  mut[clos:V/71]
      R:I/0[%rax] := arg:V/63
      R:I/1[%rbx] := clos:V/71
      R:I/0[%rax] := call I/73 R:I/0[%rax] R:I/1[%rbx]
      result:V/74 := R:I/0[%rax]
      endregion region:I/67
      R:I/0[%rax] := result:V/74
      return R:I/0[%rax]
    endif
  endif
*** After instruction selection
caml_apply4(R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx])
  arg:V/61 := R:I/0[%rax]
  arg:V/62 := R:I/1[%rbx]
  arg:V/63 := R:I/2[%rdi]
  arg:V/64 := R:I/3[%rsi]
  clos:V/65 := R:I/4[%rdx]
  V/66 := val  mut[clos:V/65 + 8]
  I/67 := V/66
  I/67 := I/67 >>s 56
  if I/67 ==s 4 then
    I/80 := int  mut[clos:V/65 + 16]
    R:I/0[%rax] := arg:V/61
    R:I/1[%rbx] := arg:V/62
    R:I/2[%rdi] := arg:V/63
    R:I/3[%rsi] := arg:V/64
    R:I/4[%rdx] := clos:V/65
    tailcall I/80 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx]
  else
    region:I/68 := beginregion
    I/69 := int  mut[clos:V/65]
    R:I/0[%rax] := arg:V/61
    R:I/1[%rbx] := clos:V/65
    R:I/0[%rax] := call I/69 R:I/0[%rax] R:I/1[%rbx]
    clos:V/70 := R:I/0[%rax]
    I/71 := int  mut[clos:V/70]
    R:I/0[%rax] := arg:V/62
    R:I/1[%rbx] := clos:V/70
    R:I/0[%rax] := call I/71 R:I/0[%rax] R:I/1[%rbx]
    clos:V/72 := R:I/0[%rax]
    I/73 := int  mut[clos:V/72]
    R:I/0[%rax] := arg:V/63
    R:I/1[%rbx] := clos:V/72
    R:I/0[%rax] := call I/73 R:I/0[%rax] R:I/1[%rbx]
    clos:V/74 := R:I/0[%rax]
    I/75 := beginregion
    if region:I/68 ==s I/75 then
      I/78 := int  mut[clos:V/74]
      R:I/0[%rax] := arg:V/64
      R:I/1[%rbx] := clos:V/74
      tailcall I/78 R:I/0[%rax] R:I/1[%rbx]
    else
      I/76 := int  mut[clos:V/74]
      R:I/0[%rax] := arg:V/64
      R:I/1[%rbx] := clos:V/74
      R:I/0[%rax] := call I/76 R:I/0[%rax] R:I/1[%rbx]
      result:V/77 := R:I/0[%rax]
      endregion region:I/68
      R:I/0[%rax] := result:V/77
      return R:I/0[%rax]
    endif
  endif
*** After instruction selection
caml_apply5(R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx])
  arg:V/61 := R:I/0[%rax]
  arg:V/62 := R:I/1[%rbx]
  arg:V/63 := R:I/2[%rdi]
  arg:V/64 := R:I/3[%rsi]
  arg:V/65 := R:I/4[%rdx]
  clos:V/66 := R:I/5[%rcx]
  V/67 := val  mut[clos:V/66 + 8]
  I/68 := V/67
  I/68 := I/68 >>s 56
  if I/68 ==s 5 then
    I/83 := int  mut[clos:V/66 + 16]
    R:I/0[%rax] := arg:V/61
    R:I/1[%rbx] := arg:V/62
    R:I/2[%rdi] := arg:V/63
    R:I/3[%rsi] := arg:V/64
    R:I/4[%rdx] := arg:V/65
    R:I/5[%rcx] := clos:V/66
    tailcall I/83 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx]
  else
    region:I/69 := beginregion
    I/70 := int  mut[clos:V/66]
    R:I/0[%rax] := arg:V/61
    R:I/1[%rbx] := clos:V/66
    R:I/0[%rax] := call I/70 R:I/0[%rax] R:I/1[%rbx]
    clos:V/71 := R:I/0[%rax]
    I/72 := int  mut[clos:V/71]
    R:I/0[%rax] := arg:V/62
    R:I/1[%rbx] := clos:V/71
    R:I/0[%rax] := call I/72 R:I/0[%rax] R:I/1[%rbx]
    clos:V/73 := R:I/0[%rax]
    I/74 := int  mut[clos:V/73]
    R:I/0[%rax] := arg:V/63
    R:I/1[%rbx] := clos:V/73
    R:I/0[%rax] := call I/74 R:I/0[%rax] R:I/1[%rbx]
    clos:V/75 := R:I/0[%rax]
    I/76 := int  mut[clos:V/75]
    R:I/0[%rax] := arg:V/64
    R:I/1[%rbx] := clos:V/75
    R:I/0[%rax] := call I/76 R:I/0[%rax] R:I/1[%rbx]
    clos:V/77 := R:I/0[%rax]
    I/78 := beginregion
    if region:I/69 ==s I/78 then
      I/81 := int  mut[clos:V/77]
      R:I/0[%rax] := arg:V/65
      R:I/1[%rbx] := clos:V/77
      tailcall I/81 R:I/0[%rax] R:I/1[%rbx]
    else
      I/79 := int  mut[clos:V/77]
      R:I/0[%rax] := arg:V/65
      R:I/1[%rbx] := clos:V/77
      R:I/0[%rax] := call I/79 R:I/0[%rax] R:I/1[%rbx]
      result:V/80 := R:I/0[%rax]
      endregion region:I/69
      R:I/0[%rax] := result:V/80
      return R:I/0[%rax]
    endif
  endif
*** After instruction selection
caml_apply7(R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx] R:I/6[%r8] R:I/7[%r9])
  arg:V/61 := R:I/0[%rax]
  arg:V/62 := R:I/1[%rbx]
  arg:V/63 := R:I/2[%rdi]
  arg:V/64 := R:I/3[%rsi]
  arg:V/65 := R:I/4[%rdx]
  arg:V/66 := R:I/5[%rcx]
  arg:V/67 := R:I/6[%r8]
  clos:V/68 := R:I/7[%r9]
  V/69 := val  mut[clos:V/68 + 8]
  I/70 := V/69
  I/70 := I/70 >>s 56
  if I/70 ==s 7 then
    I/89 := int  mut[clos:V/68 + 16]
    R:I/0[%rax] := arg:V/61
    R:I/1[%rbx] := arg:V/62
    R:I/2[%rdi] := arg:V/63
    R:I/3[%rsi] := arg:V/64
    R:I/4[%rdx] := arg:V/65
    R:I/5[%rcx] := arg:V/66
    R:I/6[%r8] := arg:V/67
    R:I/7[%r9] := clos:V/68
    tailcall I/89 R:I/0[%rax] R:I/1[%rbx] R:I/2[%rdi] R:I/3[%rsi] R:I/4[%rdx] R:I/5[%rcx] R:I/6[%r8] R:I/7[%r9]
  else
    region:I/71 := beginregion
    I/72 := int  mut[clos:V/68]
    R:I/0[%rax] := arg:V/61
    R:I/1[%rbx] := clos:V/68
    R:I/0[%rax] := call I/72 R:I/0[%rax] R:I/1[%rbx]
    clos:V/73 := R:I/0[%rax]
    I/74 := int  mut[clos:V/73]
    R:I/0[%rax] := arg:V/62
    R:I/1[%rbx] := clos:V/73
    R:I/0[%rax] := call I/74 R:I/0[%rax] R:I/1[%rbx]
    clos:V/75 := R:I/0[%rax]
    I/76 := int  mut[clos:V/75]
    R:I/0[%rax] := arg:V/63
    R:I/1[%rbx] := clos:V/75
    R:I/0[%rax] := call I/76 R:I/0[%rax] R:I/1[%rbx]
    clos:V/77 := R:I/0[%rax]
    I/78 := int  mut[clos:V/77]
    R:I/0[%rax] := arg:V/64
    R:I/1[%rbx] := clos:V/77
    R:I/0[%rax] := call I/78 R:I/0[%rax] R:I/1[%rbx]
    clos:V/79 := R:I/0[%rax]
    I/80 := int  mut[clos:V/79]
    R:I/0[%rax] := arg:V/65
    R:I/1[%rbx] := clos:V/79
    R:I/0[%rax] := call I/80 R:I/0[%rax] R:I/1[%rbx]
    clos:V/81 := R:I/0[%rax]
    I/82 := int  mut[clos:V/81]
    R:I/0[%rax] := arg:V/66
    R:I/1[%rbx] := clos:V/81
    R:I/0[%rax] := call I/82 R:I/0[%rax] R:I/1[%rbx]
    clos:V/83 := R:I/0[%rax]
    I/84 := beginregion
    if region:I/71 ==s I/84 then
      I/87 := int  mut[clos:V/83]
      R:I/0[%rax] := arg:V/67
      R:I/1[%rbx] := clos:V/83
      tailcall I/87 R:I/0[%rax] R:I/1[%rbx]
    else
      I/85 := int  mut[clos:V/83]
      R:I/0[%rax] := arg:V/67
      R:I/1[%rbx] := clos:V/83
      R:I/0[%rax] := call I/85 R:I/0[%rax] R:I/1[%rbx]
      result:V/86 := R:I/0[%rax]
      endregion region:I/71
      R:I/0[%rax] := result:V/86
      return R:I/0[%rax]
    endif
  endif
